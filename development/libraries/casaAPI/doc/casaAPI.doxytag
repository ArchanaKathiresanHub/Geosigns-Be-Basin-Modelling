<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>casaAPI.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>casaAPI_8h</filename>
    <includes id="ScenarioAnalysis_8h" name="ScenarioAnalysis.h" local="yes" imported="no">ScenarioAnalysis.h</includes>
    <namespace>casa</namespace>
    <namespace>casa::BusinessLogicRulesSet</namespace>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLayerThickness</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>ab67ef10405fc44995191d1853f3c658e</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryTopCrustHeatProduction</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a6a3c1ae9628133d4f74a81ab31a5409f</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockTOC</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a1eef69b4de3cf42d78b016ebf0598934</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockHI</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a777857b38f317ce0d771d4dde3a2fc70</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockHC</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a773accb6839b2fd6d537ed7faa34b7a9</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockPreAsphaltActEnergy</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a83195bf673f8830debda89535b149279</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockType</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a397878208e677360976b16a13ea8f62c</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const std::vector&lt; std::string &gt; &amp;stVariation, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryOneCrustThinningEvent</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>ae78fca38b49eca8a39260c1051dbf1d1</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, double minThickIni, double maxThickIni, double minT0, double maxT0, double minDeltaT, double maxDeltaT, double minThinningFct, double maxThinningFct, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryCrustThinning</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>afdc3c6c6e26befb8c318ffc0cd7e3497</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, double minThickIni, double maxThickIni, const std::vector&lt; double &gt; &amp;minT0, const std::vector&lt; double &gt; &amp;maxT0, const std::vector&lt; double &gt; &amp;minDeltaT, const std::vector&lt; double &gt; &amp;maxDeltaT, const std::vector&lt; double &gt; &amp;minThinningFct, const std::vector&lt; double &gt; &amp;maxThinningFct, const std::vector&lt; std::string &gt; &amp;mapsList, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryPorosityModelParameters</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a049ea60d1ef5e40e351ffec49d369631</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *litName, const char *modelName, double minSurfPor, double maxSurfPor, double minCompCoef, double maxCompCoef, double minMinPor, double maxMinPor, double minCompCoef1, double maxCompCoef1, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySurfacePorosity</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a110a814dad783c31fcca9aa785979abc</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::vector&lt; std::pair&lt; std::string, size_t &gt; &gt; &amp;layersName, const std::vector&lt; std::string &gt; &amp;alochtLitName, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;faultsName, const std::string &amp;litName, double minSurfPor, double maxSurfPor, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryCompactionCoefficient</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a07b2530c62ff077d2ecec4a5a8ae4433</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::vector&lt; std::pair&lt; std::string, size_t &gt; &gt; &amp;layersName, const std::vector&lt; std::string &gt; &amp;alochtLitName, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;faultsName, const std::string &amp;litName, double minCompCoef, double maxCompCoef, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLithoFraction</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>af7d62f54fa68b6e035c4c45279fba253</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::string &amp;layerName, std::vector&lt; int &gt; lithoFractionsInds, std::vector&lt; double &gt; minLithoFrac, std::vector&lt; double &gt; maxLithoFrac, casa::VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryPermeabilityModelParameters</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a873b08f4632795c4030767f5f7bae714</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *lithoName, const char *modelName, std::vector&lt; double &gt; &amp;minModelPrms, std::vector&lt; double &gt; &amp;maxModelPrms, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLithoSTPThermalCondCoeffParameter</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a3e0af4981838a50b99809b4eaaf14a54</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *litName, double minVal, double maxVal, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CauldronApp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>CauldronApp_8h</filename>
    <class kind="class">casa::CauldronApp</class>
    <namespace>casa</namespace>
    <member kind="enumeration">
      <type></type>
      <name>AppPipelineLevel</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PTSolver</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0a20f10cc775118cfd89628aeb6beeff99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Genex</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0abdd3ad1f51b9f3748049526a5219310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HiResDecompaction</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0a2b003274dca15b4003bbb151b5bea2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Migration</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0aa8d94069c0a64b52c1bebeb648a6c706</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Postprocessing</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0ab7d7035a4b21dbe5cc57afd4ebb4b0b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataDigger.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>DataDigger_8h</filename>
    <includes id="RunCaseSet_8h" name="RunCaseSet.h" local="yes" imported="no">RunCaseSet.h</includes>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsSpace_8h" name="ObsSpace.h" local="yes" imported="no">ObsSpace.h</includes>
    <class kind="class">casa::DataDigger</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>DoEGenerator.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>DoEGenerator_8h</filename>
    <class kind="class">casa::DoEGenerator</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>JobScheduler.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>JobScheduler_8h</filename>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>JobSchedulerLocal.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>JobSchedulerLocal_8h</filename>
    <includes id="JobScheduler_8h" name="JobScheduler.h" local="yes" imported="no">JobScheduler.h</includes>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>JobSchedulerLSF.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>JobSchedulerLSF_8h</filename>
    <includes id="JobScheduler_8h" name="JobScheduler.h" local="yes" imported="no">JobScheduler.h</includes>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>MonteCarloSolver.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>MonteCarloSolver_8h</filename>
    <class kind="class">casa::MonteCarloSolver</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>Observable.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>Observable_8h</filename>
    <class kind="class">casa::Observable</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsGridPropertyWell.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsGridPropertyWell_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsGridPropertyWell</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsGridPropertyXYZ.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsGridPropertyXYZ_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsGridPropertyXYZ</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsSourceRockMapProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsSourceRockMapProp_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsSourceRockMapProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsSpace.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsSpace_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <class kind="class">casa::ObsSpace</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsTrapDerivedProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsTrapDerivedProp_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsTrapDerivedProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsTrapProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsTrapProp_8h</filename>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsTrapProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsValue.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsValue_8h</filename>
    <class kind="class">casa::ObsValue</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsValueDoubleArray.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsValueDoubleArray_8h</filename>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsValueDoubleArray</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsValueDoubleScalar.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsValueDoubleScalar_8h</filename>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::ObsValueDoubleScalar</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ObsValueTransformable.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ObsValueTransformable_8h</filename>
    <includes id="ObsValueDoubleArray_8h" name="ObsValueDoubleArray.h" local="yes" imported="no">ObsValueDoubleArray.h</includes>
    <includes id="Observable_8h" name="Observable.h" local="yes" imported="no">Observable.h</includes>
    <class kind="class">casa::ObsValueTransformable</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>Parameter.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>Parameter_8h</filename>
    <includes id="CauldronApp_8h" name="CauldronApp.h" local="yes" imported="no">CauldronApp.h</includes>
    <class kind="class">casa::Parameter</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmCompactionCoefficient.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmCompactionCoefficient_8h</filename>
    <includes id="PrmLithologyProp_8h" name="PrmLithologyProp.h" local="yes" imported="no">PrmLithologyProp.h</includes>
    <class kind="class">casa::PrmCompactionCoefficient</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmCrustThinning.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmCrustThinning_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmCrustThinning</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmLithoFraction.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmLithoFraction_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmLithoFraction</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmLithologyProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmLithologyProp_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmLithologyProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmLithoSTPThermalCond.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmLithoSTPThermalCond_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmLithoSTPThermalCond</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmOneCrustThinningEvent.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmOneCrustThinningEvent_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmOneCrustThinningEvent</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmPermeabilityModel.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmPermeabilityModel_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmPermeabilityModel</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmPorosityModel.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmPorosityModel_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmPorosityModel</class>
    <namespace>casa</namespace>
    <member kind="function">
      <type>double</type>
      <name>SMcc2sp</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>add106522985596bd8258f1efc29b6d0b</anchor>
      <arglist>(double cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMsp2cc</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a9e919c21ae01079a214e4aa57c16a16e</anchor>
      <arglist>(double surfPor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMsp2cf</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>aaedfeeaa49d0170b85984293fc2d3521</anchor>
      <arglist>(double surfPor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcc2cf</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a5a9fbbf4cc16210f7eef6d336c4a4f91</anchor>
      <arglist>(double cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcf2sp</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad693831ac3f141bbe33faa9edcea445f</anchor>
      <arglist>(double clayFrac)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcf2cc</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a76146b8d4ee38fde100d629f731a2b72</anchor>
      <arglist>(double clayFrac)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockHC.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockHC_8h</filename>
    <includes id="PrmSourceRockProp_8h" name="PrmSourceRockProp.h" local="yes" imported="no">PrmSourceRockProp.h</includes>
    <class kind="class">casa::PrmSourceRockHC</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockHI.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockHI_8h</filename>
    <includes id="PrmSourceRockProp_8h" name="PrmSourceRockProp.h" local="yes" imported="no">PrmSourceRockProp.h</includes>
    <class kind="class">casa::PrmSourceRockHI</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockPreAsphaltStartAct.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockPreAsphaltStartAct_8h</filename>
    <includes id="PrmSourceRockProp_8h" name="PrmSourceRockProp.h" local="yes" imported="no">PrmSourceRockProp.h</includes>
    <class kind="class">casa::PrmSourceRockPreAsphaltStartAct</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockProp_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmSourceRockProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockTOC.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockTOC_8h</filename>
    <includes id="PrmSourceRockProp_8h" name="PrmSourceRockProp.h" local="yes" imported="no">PrmSourceRockProp.h</includes>
    <class kind="class">casa::PrmSourceRockTOC</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSourceRockType.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSourceRockType_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="VarPrmSourceRockType_8h" name="VarPrmSourceRockType.h" local="yes" imported="no">VarPrmSourceRockType.h</includes>
    <class kind="class">casa::PrmSourceRockType</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmSurfacePorosity.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmSurfacePorosity_8h</filename>
    <includes id="PrmLithologyProp_8h" name="PrmLithologyProp.h" local="yes" imported="no">PrmLithologyProp.h</includes>
    <class kind="class">casa::PrmSurfacePorosity</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmTopCrustHeatProduction.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmTopCrustHeatProduction_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmTopCrustHeatProduction</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>PrmWindow.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>PrmWindow_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::PrmWindow</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>RSProxy.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>RSProxy_8h</filename>
    <class kind="class">casa::RSProxy</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>RSProxySet.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>RSProxySet_8h</filename>
    <class kind="class">casa::RSProxySet</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>RunCase.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>RunCase_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="ObsValue_8h" name="ObsValue.h" local="yes" imported="no">ObsValue.h</includes>
    <class kind="class">casa::RunCase</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>RunCaseSet.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>RunCaseSet_8h</filename>
    <class kind="class">casa::RunCaseSet</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>RunManager.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>RunManager_8h</filename>
    <includes id="CauldronApp_8h" name="CauldronApp.h" local="yes" imported="no">CauldronApp.h</includes>
    <class kind="class">casa::RunManager</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>ScenarioAnalysis.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>ScenarioAnalysis_8h</filename>
    <includes id="RunCaseSet_8h" name="RunCaseSet.h" local="yes" imported="no">RunCaseSet.h</includes>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <includes id="VarPrmCategorical_8h" name="VarPrmCategorical.h" local="yes" imported="no">VarPrmCategorical.h</includes>
    <includes id="DataDigger_8h" name="DataDigger.h" local="yes" imported="no">DataDigger.h</includes>
    <includes id="DoEGenerator_8h" name="DoEGenerator.h" local="yes" imported="no">DoEGenerator.h</includes>
    <includes id="MonteCarloSolver_8h" name="MonteCarloSolver.h" local="yes" imported="no">MonteCarloSolver.h</includes>
    <includes id="ObsSpace_8h" name="ObsSpace.h" local="yes" imported="no">ObsSpace.h</includes>
    <includes id="RSProxy_8h" name="RSProxy.h" local="yes" imported="no">RSProxy.h</includes>
    <includes id="RSProxySet_8h" name="RSProxySet.h" local="yes" imported="no">RSProxySet.h</includes>
    <includes id="RunManager_8h" name="RunManager.h" local="yes" imported="no">RunManager.h</includes>
    <includes id="SensitivityCalculator_8h" name="SensitivityCalculator.h" local="yes" imported="no">SensitivityCalculator.h</includes>
    <includes id="VarSpace_8h" name="VarSpace.h" local="yes" imported="no">VarSpace.h</includes>
    <class kind="class">casa::ScenarioAnalysis</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>SensitivityCalculator.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>SensitivityCalculator_8h</filename>
    <includes id="TornadoSensitivityInfo_8h" name="TornadoSensitivityInfo.h" local="yes" imported="no">TornadoSensitivityInfo.h</includes>
    <class kind="struct">casa::ParetoSensitivityInfo</class>
    <class kind="class">casa::SensitivityCalculator</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>SUMlibUtils.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>SUMlibUtils_8h</filename>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>TornadoSensitivityInfo.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>TornadoSensitivityInfo_8h</filename>
    <class kind="class">casa::TornadoSensitivityInfo</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarParameter.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarParameter_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <class kind="class">casa::VarParameter</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmCategorical.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmCategorical_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="VarParameter_8h" name="VarParameter.h" local="yes" imported="no">VarParameter.h</includes>
    <class kind="class">casa::VarPrmCategorical</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmCompactionCoefficient.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmCompactionCoefficient_8h</filename>
    <includes id="VarPrmLithologyProp_8h" name="VarPrmLithologyProp.h" local="yes" imported="no">VarPrmLithologyProp.h</includes>
    <includes id="PrmCompactionCoefficient_8h" name="PrmCompactionCoefficient.h" local="yes" imported="no">PrmCompactionCoefficient.h</includes>
    <class kind="class">casa::VarPrmCompactionCoefficient</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmContinuous.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmContinuous_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="VarParameter_8h" name="VarParameter.h" local="yes" imported="no">VarParameter.h</includes>
    <class kind="class">casa::VarPrmContinuous</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmCrustThinning.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmCrustThinning_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <class kind="class">casa::VarPrmCrustThinning</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmDiscrete.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmDiscrete_8h</filename>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="VarParameter_8h" name="VarParameter.h" local="yes" imported="no">VarParameter.h</includes>
    <class kind="class">casa::VarPrmDiscrete</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmLithoFraction.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmLithoFraction_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <includes id="PrmLithoFraction_8h" name="PrmLithoFraction.h" local="yes" imported="no">PrmLithoFraction.h</includes>
    <class kind="class">casa::VarPrmLithoFraction</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmLithologyProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmLithologyProp_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <includes id="PrmLithologyProp_8h" name="PrmLithologyProp.h" local="yes" imported="no">PrmLithologyProp.h</includes>
    <class kind="class">casa::VarPrmLithologyProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmLithoSTPThermalCond.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmLithoSTPThermalCond_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <class kind="class">casa::VarPrmLithoSTPThermalCond</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmOneCrustThinningEvent.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmOneCrustThinningEvent_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <class kind="class">casa::VarPrmOneCrustThinningEvent</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmPermeabilityModel.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmPermeabilityModel_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <includes id="PrmPermeabilityModel_8h" name="PrmPermeabilityModel.h" local="yes" imported="no">PrmPermeabilityModel.h</includes>
    <class kind="class">casa::VarPrmPermeabilityModel</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmPorosityModel.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmPorosityModel_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <includes id="PrmPorosityModel_8h" name="PrmPorosityModel.h" local="yes" imported="no">PrmPorosityModel.h</includes>
    <class kind="class">casa::VarPrmPorosityModel</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockHC.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockHC_8h</filename>
    <includes id="VarPrmSourceRockProp_8h" name="VarPrmSourceRockProp.h" local="yes" imported="no">VarPrmSourceRockProp.h</includes>
    <class kind="class">casa::VarPrmSourceRockHC</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockHI.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockHI_8h</filename>
    <includes id="VarPrmSourceRockProp_8h" name="VarPrmSourceRockProp.h" local="yes" imported="no">VarPrmSourceRockProp.h</includes>
    <class kind="class">casa::VarPrmSourceRockHI</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockPreAsphaltStartAct.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockPreAsphaltStartAct_8h</filename>
    <includes id="VarPrmSourceRockProp_8h" name="VarPrmSourceRockProp.h" local="yes" imported="no">VarPrmSourceRockProp.h</includes>
    <class kind="class">casa::VarPrmSourceRockPreAsphaltStartAct</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockProp.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockProp_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <class kind="class">casa::VarPrmSourceRockProp</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockTOC.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockTOC_8h</filename>
    <includes id="VarPrmSourceRockProp_8h" name="VarPrmSourceRockProp.h" local="yes" imported="no">VarPrmSourceRockProp.h</includes>
    <class kind="class">casa::VarPrmSourceRockTOC</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSourceRockType.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSourceRockType_8h</filename>
    <includes id="VarPrmCategorical_8h" name="VarPrmCategorical.h" local="yes" imported="no">VarPrmCategorical.h</includes>
    <class kind="class">casa::VarPrmSourceRockType</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmSurfacePorosity.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmSurfacePorosity_8h</filename>
    <includes id="VarPrmLithologyProp_8h" name="VarPrmLithologyProp.h" local="yes" imported="no">VarPrmLithologyProp.h</includes>
    <includes id="PrmSurfacePorosity_8h" name="PrmSurfacePorosity.h" local="yes" imported="no">PrmSurfacePorosity.h</includes>
    <class kind="class">casa::VarPrmSurfacePorosity</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarPrmTopCrustHeatProduction.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarPrmTopCrustHeatProduction_8h</filename>
    <includes id="VarPrmContinuous_8h" name="VarPrmContinuous.h" local="yes" imported="no">VarPrmContinuous.h</includes>
    <class kind="class">casa::VarPrmTopCrustHeatProduction</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="file">
    <name>VarSpace.h</name>
    <path>E:/Build/cld-dev/development/libraries/casaAPI/src/</path>
    <filename>VarSpace_8h</filename>
    <class kind="class">casa::VarSpace</class>
    <namespace>casa</namespace>
  </compound>
  <compound kind="page">
    <name>CASA_API_Descr</name>
    <title>Computer Aided Scenario Analysis API</title>
    <filename>CASA_API_Descr</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ClassHierachyPage</name>
    <title>CASA interface classes hierarchy description.</title>
    <filename>CASA_ClassHierachyPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarParametersAndObservablesPage</name>
    <title>Variable Parameters and Observables</title>
    <filename>CASA_VarParametersAndObservablesPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ScenarioAnalysisPage</name>
    <title>Scenario analysis workflows</title>
    <filename>CASA_ScenarioAnalysisPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_DataDiggerPage</name>
    <title>Data Digger</title>
    <filename>CASA_DataDiggerPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_DoEGeneratorPage</name>
    <title>Design of Experiments generator</title>
    <filename>CASA_DoEGeneratorPage</filename>
    <docanchor file="CASA_DoEGeneratorPage" title="Variety of DoE algorithms available in API">CASA_DoEGeneratorSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Tornado design">TornadoSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Plackett-Burman design">PlackettBurmanSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Box-Behnken design">BoxBehnkenSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Full Factorial design">FullFactorialSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Space filling design">SpaceFillingSection</docanchor>
    <docanchor file="CASA_DoEGeneratorPage" title="Basic/Optimized Latin Hypercube.">LatinHypercubeSection</docanchor>
  </compound>
  <compound kind="page">
    <name>CASA_MonteCarloSolverPage</name>
    <title>Monte Carlo solver</title>
    <filename>CASA_MonteCarloSolverPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservablePage</name>
    <title>Observable description</title>
    <filename>CASA_ObservablePage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservableGridPropWellPage</name>
    <title>Cauldron grid property along a well trajectory</title>
    <filename>CASA_ObservableGridPropWellPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservableGridPropXYZPage</name>
    <title>Any Cauldron grid property at specified XYZ point</title>
    <filename>CASA_ObservableGridPropXYZPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservableSourceRockMapPropPage</name>
    <title>Any Genex map property value for source rock layer at</title>
    <filename>CASA_ObservableSourceRockMapPropPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObsSpacePage</name>
    <title>Container for observables description</title>
    <filename>CASA_ObsSpacePage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservableTrapDerivedPropPage</name>
    <title>Any trap property which could be extracted by datadriller after migration calculation.</title>
    <filename>CASA_ObservableTrapDerivedPropPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ObservableTrapPropPage</name>
    <title>Any trap property which could be extracted by datadriller after migration calculation.</title>
    <filename>CASA_ObservableTrapPropPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_ParameterPage</name>
    <title>Cauldron project parameter</title>
    <filename>CASA_ParameterPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_CompactionCoefficientPage</name>
    <title>Lithology porosity model</title>
    <filename>CASA_CompactionCoefficientPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_CrustThinningPage</name>
    <title>Multi event crust thinning parameter</title>
    <filename>CASA_CrustThinningPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_LithoFractionPage</name>
    <title>lithofraction model</title>
    <filename>CASA_LithoFractionPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_LithologyPropPage</name>
    <title>Lithology porosity model</title>
    <filename>CASA_LithologyPropPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_LithoSTPThermalCondPage</name>
    <title>Lithology STP (Standart Temperature and Pressure) thermal conductivity coefficient [W/m/K]</title>
    <filename>CASA_LithoSTPThermalCondPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_OneCrustThinningEventPage</name>
    <title>One event crust thinning parameter</title>
    <filename>CASA_OneCrustThinningEventPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_PermeabilityModelPage</name>
    <title>Lithology permeability model</title>
    <filename>CASA_PermeabilityModelPage</filename>
    <docanchor file="CASA_PermeabilityModelPage">perm_vs_por</docanchor>
    <docanchor file="CASA_PermeabilityModelPage">stand_lith_perm</docanchor>
    <docanchor file="CASA_PermeabilityModelPage" title="None/Impermeable models means tiny constant permeability">PermeabilityModelPrmInpermeableSec</docanchor>
    <docanchor file="CASA_PermeabilityModelPage" title="Permeability model for sandstone">PermeabilityModelPrmSandstoneSec</docanchor>
    <docanchor file="CASA_PermeabilityModelPage" title="Permeability model for mudstone">PermeabilityModelPrmMudstoneSec</docanchor>
    <docanchor file="CASA_PermeabilityModelPage" title="Permeability model is described by a Permeability vs Porosity profile">MultiPointPermModelSec</docanchor>
  </compound>
  <compound kind="page">
    <name>CASA_PorosityModelPage</name>
    <title>Lithology porosity model</title>
    <filename>CASA_PorosityModelPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SourceRockHCPage</name>
    <title>Source rock H/C initial ratio parameter</title>
    <filename>CASA_SourceRockHCPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SourceRockHIPage</name>
    <title>Source rock Hydrogen Index (HI) initial ratio parameter</title>
    <filename>CASA_SourceRockHIPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SourceRockPreAsphaltStartActPage</name>
    <title>Source rock pre-asphaltene activation energy parameter</title>
    <filename>CASA_SourceRockPreAsphaltStartActPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SourceRockTOCPage</name>
    <title>Source rock initial Total Organic Contents (TOC) parameter</title>
    <filename>CASA_SourceRockTOCPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SourceRockTypePage</name>
    <title>Source rock type parameter</title>
    <filename>CASA_SourceRockTypePage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SurfacePorosityPage</name>
    <title>Lithology porosity model</title>
    <filename>CASA_SurfacePorosityPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_TopCrustHeatProductionPage</name>
    <title>Top crust heat production rate parameter</title>
    <filename>CASA_TopCrustHeatProductionPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_Window</name>
    <title>windowed projects</title>
    <filename>CASA_Window</filename>
  </compound>
  <compound kind="page">
    <name>CASA_RSProxyPage</name>
    <title>Response surface proxy</title>
    <filename>CASA_RSProxyPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_KrigingPage</name>
    <title>Kriging interpolation</title>
    <filename>CASA_KrigingPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_RunManagerPage</name>
    <title>Jobs execution manager</title>
    <filename>CASA_RunManagerPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_SensitivityCalculatorPage</name>
    <title>Sensitivity calculator for variable parameters</title>
    <filename>CASA_SensitivityCalculatorPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarParameterPage</name>
    <title>Variable parameter</title>
    <filename>CASA_VarParameterPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarPrmCategoricalPage</name>
    <title>Variable parameter for categorical values</title>
    <filename>CASA_VarPrmCategoricalPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarPrmContinuousPage</name>
    <title>Continuous variable parameter</title>
    <filename>CASA_VarPrmContinuousPage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarPrmDiscretePage</name>
    <title>Discrete variable parameter</title>
    <filename>CASA_VarPrmDiscretePage</filename>
  </compound>
  <compound kind="page">
    <name>CASA_VarSpacePage</name>
    <title>Container for variable parameters</title>
    <filename>CASA_VarSpacePage</filename>
  </compound>
  <compound kind="namespace">
    <name>casa</name>
    <filename>namespacecasa.html</filename>
    <namespace>casa::BusinessLogicRulesSet</namespace>
    <class kind="class">casa::CasaDeserializer</class>
    <class kind="class">casa::CasaSerializable</class>
    <class kind="class">casa::CasaSerializer</class>
    <class kind="class">casa::CauldronApp</class>
    <class kind="class">casa::DataDigger</class>
    <class kind="class">casa::DoEGenerator</class>
    <class kind="class">casa::LMOptAlgorithm</class>
    <class kind="class">casa::MonteCarloSolver</class>
    <class kind="class">casa::Observable</class>
    <class kind="class">casa::ObsGridPropertyWell</class>
    <class kind="class">casa::ObsGridPropertyXYZ</class>
    <class kind="class">casa::ObsSourceRockMapProp</class>
    <class kind="class">casa::ObsSpace</class>
    <class kind="class">casa::ObsTrapDerivedProp</class>
    <class kind="class">casa::ObsTrapProp</class>
    <class kind="class">casa::ObsValue</class>
    <class kind="class">casa::ObsValueDoubleArray</class>
    <class kind="class">casa::ObsValueDoubleScalar</class>
    <class kind="class">casa::ObsValueTransformable</class>
    <class kind="class">casa::Parameter</class>
    <class kind="struct">casa::ParetoSensitivityInfo</class>
    <class kind="class">casa::PrmCompactionCoefficient</class>
    <class kind="class">casa::PrmCrustThinning</class>
    <class kind="class">casa::PrmLithoFraction</class>
    <class kind="class">casa::PrmLithologyProp</class>
    <class kind="class">casa::PrmLithoSTPThermalCond</class>
    <class kind="class">casa::PrmOneCrustThinningEvent</class>
    <class kind="class">casa::PrmPermeabilityModel</class>
    <class kind="class">casa::PrmPorosityModel</class>
    <class kind="class">casa::PrmSourceRockHC</class>
    <class kind="class">casa::PrmSourceRockHI</class>
    <class kind="class">casa::PrmSourceRockPreAsphaltStartAct</class>
    <class kind="class">casa::PrmSourceRockProp</class>
    <class kind="class">casa::PrmSourceRockTOC</class>
    <class kind="class">casa::PrmSourceRockType</class>
    <class kind="class">casa::PrmSurfacePorosity</class>
    <class kind="class">casa::PrmTopCrustHeatProduction</class>
    <class kind="class">casa::PrmWindow</class>
    <class kind="class">casa::RSProxy</class>
    <class kind="class">casa::RSProxySet</class>
    <class kind="class">casa::RunCase</class>
    <class kind="class">casa::RunCaseSet</class>
    <class kind="class">casa::RunManager</class>
    <class kind="class">casa::ScenarioAnalysis</class>
    <class kind="class">casa::SensitivityCalculator</class>
    <class kind="class">casa::SimpleBinDeserializer</class>
    <class kind="class">casa::SimpleBinSerializer</class>
    <class kind="class">casa::SimpleTxtDeserializer</class>
    <class kind="class">casa::SimpleTxtSerializer</class>
    <class kind="class">casa::TornadoSensitivityInfo</class>
    <class kind="class">casa::VarParameter</class>
    <class kind="class">casa::VarPrmCategorical</class>
    <class kind="class">casa::VarPrmCompactionCoefficient</class>
    <class kind="class">casa::VarPrmContinuous</class>
    <class kind="class">casa::VarPrmCrustThinning</class>
    <class kind="class">casa::VarPrmDiscrete</class>
    <class kind="class">casa::VarPrmLithoFraction</class>
    <class kind="class">casa::VarPrmLithologyProp</class>
    <class kind="class">casa::VarPrmLithoSTPThermalCond</class>
    <class kind="class">casa::VarPrmOneCrustThinningEvent</class>
    <class kind="class">casa::VarPrmPermeabilityModel</class>
    <class kind="class">casa::VarPrmPorosityModel</class>
    <class kind="class">casa::VarPrmSourceRockHC</class>
    <class kind="class">casa::VarPrmSourceRockHI</class>
    <class kind="class">casa::VarPrmSourceRockPreAsphaltStartAct</class>
    <class kind="class">casa::VarPrmSourceRockProp</class>
    <class kind="class">casa::VarPrmSourceRockTOC</class>
    <class kind="class">casa::VarPrmSourceRockType</class>
    <class kind="class">casa::VarPrmSurfacePorosity</class>
    <class kind="class">casa::VarPrmTopCrustHeatProduction</class>
    <class kind="class">casa::VarSpace</class>
    <member kind="enumeration">
      <type></type>
      <name>AppPipelineLevel</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PTSolver</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0a20f10cc775118cfd89628aeb6beeff99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Genex</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0abdd3ad1f51b9f3748049526a5219310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HiResDecompaction</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0a2b003274dca15b4003bbb151b5bea2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Migration</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0aa8d94069c0a64b52c1bebeb648a6c706</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Postprocessing</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad6983af7c691baff9911d1972698c9b0ab7d7035a4b21dbe5cc57afd4ebb4b0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcc2sp</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>add106522985596bd8258f1efc29b6d0b</anchor>
      <arglist>(double cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMsp2cc</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a9e919c21ae01079a214e4aa57c16a16e</anchor>
      <arglist>(double surfPor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMsp2cf</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>aaedfeeaa49d0170b85984293fc2d3521</anchor>
      <arglist>(double surfPor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcc2cf</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a5a9fbbf4cc16210f7eef6d336c4a4f91</anchor>
      <arglist>(double cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcf2sp</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>ad693831ac3f141bbe33faa9edcea445f</anchor>
      <arglist>(double clayFrac)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SMcf2cc</name>
      <anchorfile>namespacecasa.html</anchorfile>
      <anchor>a76146b8d4ee38fde100d629f731a2b72</anchor>
      <arglist>(double clayFrac)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::CasaDeserializer</name>
    <filename>classcasa_1_1CasaDeserializer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CasaDeserializer</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>ad5e1d47fe95e863719c4e8038ed2452a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkObjectDescription</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>ad3d421dbfeda9a070fa2eddd72d440a7</anchor>
      <arglist>(const char *objType, const std::string &amp;objName, unsigned int &amp;ver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>loadObjectDescription</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>ab469a922af94acee60e9d46b50eeb9c7</anchor>
      <arglist>(std::string &amp;objType, std::string &amp;objName, unsigned int &amp;ver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a0903fbeb4bd5ae0e7bb5e03ff524290a</anchor>
      <arglist>(SUMlib::ISerializable &amp;so, const std::string &amp;objName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a1e5c65fef2dcd33a73691f0b49a38a56</anchor>
      <arglist>(bool &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a2bfbc21e14cd60a11bf72b7d2803d3a6</anchor>
      <arglist>(int &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>afa98a9b20dcdd0a69c4bfaf4bdc6d844</anchor>
      <arglist>(unsigned int &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>aaa057445b9a15cfe4f35fe8c22d905c6</anchor>
      <arglist>(long long &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a81f57c9f5004e93cfc92daf5b10079ee</anchor>
      <arglist>(unsigned long long &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>af0a57379f981fb073524337961349007</anchor>
      <arglist>(ObjRefID &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>aae69830e8867c48d850e8738d5468bd3</anchor>
      <arglist>(float &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a3da2b272fad0e53fc7b93f944025d9f8</anchor>
      <arglist>(double &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>aa859d76439c7ef196cb9e762c52a07fe</anchor>
      <arglist>(std::string &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>afdbda3d341e221fc5750f8f1569d1994</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a1f8fe5e86673e2a218109a6fcb81cd96</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>ad559ef08eb58f4f957d2a5682997e977</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a157250e11a55fc1483c26f69f42a1b7a</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a137a9c017f7ad5f2c4ac464921876bae</anchor>
      <arglist>(std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a1b05fd1cc8b5f668b38b5203db8fff14</anchor>
      <arglist>(std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a7dbcd738c0be4c59d2204b8b46e69974</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a379dbc8024fb2da8368f342cea772471</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a57196659b969796ccf05778fbd52fdff</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>aa022a5de95bac7a55245f61f5f94fff5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CasaDeserializer *</type>
      <name>createDeserializer</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>ae63bc5aecb6a79e5a3d9492a8d37ccd3</anchor>
      <arglist>(std::istream &amp;fid, const std::string &amp;fileFormat, unsigned int ver)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CasaDeserializer</name>
      <anchorfile>classcasa_1_1CasaDeserializer.html</anchorfile>
      <anchor>a00220914e0d81d806a1e4d78b0050856</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::CasaSerializable</name>
    <filename>classcasa_1_1CasaSerializable.html</filename>
    <member kind="function">
      <type></type>
      <name>CasaSerializable</name>
      <anchorfile>classcasa_1_1CasaSerializable.html</anchorfile>
      <anchor>a5e75f3453ef6b200ad1636327417eb9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::CasaSerializer</name>
    <filename>classcasa_1_1CasaSerializer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CasaSerializer</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a1388a8f3ad23f49525c79e2a34014e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>aac22d377e058f8ffe231d5d10c306416</anchor>
      <arglist>(const CasaSerializable &amp;so, const std::string &amp;objName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a0a75381a9a0961d12c82fb45dc614349</anchor>
      <arglist>(const SUMlib::ISerializable &amp;so, const std::string &amp;objName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a362122e18202532e9d23b4c9a960fff8</anchor>
      <arglist>(bool val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>ae68be1df03f33e92d97b32db490df43c</anchor>
      <arglist>(int val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a4b85270bbc2d2755e405e14a8232c95f</anchor>
      <arglist>(unsigned int val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a74c61619723a5b4c10299c0074b51e10</anchor>
      <arglist>(long long val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a17368bc0caae70c3521764ea27b09b26</anchor>
      <arglist>(unsigned long long val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>adc96ff892b82a5eeb1779e4597d13247</anchor>
      <arglist>(ObjRefID val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a96d57ab4c61b6f92c2e7bef543b231ce</anchor>
      <arglist>(float val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>af4792a327c41b8db64609b9f43c3b55e</anchor>
      <arglist>(double val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a0acaba3c78f2df6184ee358d05f3cb9e</anchor>
      <arglist>(const std::string &amp;val, const std::string &amp;valName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a6bf050890a21ff59cdeb18a9c7e96dc0</anchor>
      <arglist>(const std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>ad4ca08cd8857428b4e054fdeffa5ce74</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>aa60298c26755bcd7272fcb9a831f5990</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a7b9f41196cc74a790d2ad88d4da50df5</anchor>
      <arglist>(const std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a02d50247fbf83374c5957a42a7bfd887</anchor>
      <arglist>(const std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a582c339b9643c9948a79e03aead75f90</anchor>
      <arglist>(const std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a07af59ff3f11b5a88b15f05a695f7eff</anchor>
      <arglist>(const std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a0df511cdcdaca7cabcedbff7f236daa1</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>ab4eade9a414540b879c978091ee60d7b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a725fcb6a9ac3a91e11ad3b78ea161d4f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ObjRefID</type>
      <name>ptr2id</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>aab09dc624ea4f7c48d0fb80f65b7b6d9</anchor>
      <arglist>(const T *obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CasaSerializer *</type>
      <name>createSerializer</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a8bf9413995abb30bfdcd10644c970ad2</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileFormat, int ver)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CasaSerializer</name>
      <anchorfile>classcasa_1_1CasaSerializer.html</anchorfile>
      <anchor>a91fbbfead7311ff2b08026bf6d21ea76</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::CauldronApp</name>
    <filename>classcasa_1_1CauldronApp.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>ShellType</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a0c1b35d4bb55066c9da143d3eac8c74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CauldronApp</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a66c9b6b83bc92a82e7fa1a4c133eeeed</anchor>
      <arglist>(ShellType sh, const std::string &amp;appName, bool isParallel=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CauldronApp</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a3290d08c96607201702c4ffaed1bba51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a61055e091bf352610890996efc0e04c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScriptBody</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ac59a5cdae063521f89ef537786e1d5da</anchor>
      <arglist>(const std::string &amp;cmdLine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCauldronVersion</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a00fb16fc9b5b2b0084378eefaa1925c8</anchor>
      <arglist>(const std::string &amp;ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>generateScript</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ab27bfb10a62bd1ce7c8b1b24dd52726b</anchor>
      <arglist>(const std::string &amp;inProjectFile, const std::string &amp;outProjectFile, const std::string &amp;scenarioID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>generateCopyResultsScript</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>aa59cd92d8964e8788373a0265088cca8</anchor>
      <arglist>(const std::string &amp;fromProj, const std::string &amp;toProj, const std::string &amp;scenarioID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPathToApp</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a32da7033b689116cc3460bbc25a01bb1</anchor>
      <arglist>(const std::string &amp;rootPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCPUs</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a274b94185bf9bddb7b1917c33f118e96</anchor>
      <arglist>(int numOfCPUs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cpus</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ac79e483958c26de93ec0e9f5342f8a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRunTimeLimit</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>abd44d5b07c23f144ea4a5b312b93bb24</anchor>
      <arglist>(size_t runTimeLim)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>runTimeLimit</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a79d2e7ec8bc5b779137c149d110e1a9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a1225ce3fb2c67c9c305596a5fac1d4d6</anchor>
      <arglist>(const std::string &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>scriptSuffix</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>adcc3877c79d0ebd88a1e93025c02ccc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>aeaa19c2f571751791266cbcede34f52b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ac5740ed43d9d29f2ce8e951d8361d842</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a0b568ff3d2cff0252b4a14fa362162ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CauldronApp</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>aa94a4a6036555cd3a029b2e92b20e577</anchor>
      <arglist>(CasaDeserializer &amp;inStream, const char *objName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>env</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a1659b80c59c08d805ea047266ad673c5</anchor>
      <arglist>(const char *varName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dumpEnv</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a482fa9a3eb028f966fb4dccac47acc5b</anchor>
      <arglist>(std::ostream &amp;oss)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>pushDefaultEnv</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a61e40c51ac09950f7e73fd3d7060a5ec</anchor>
      <arglist>(const std::string &amp;varName, const std::string &amp;varValue)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>m_env</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>abdfb2c8407f0948d05aec17e5d061cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_appName</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a0df1c825033cd84703b4372b6294efd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_scriptBody</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a0cf4bea9f6b8d346af400a50e241a1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_parallel</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a8fd0cc4585ab86e986f1e45577eefade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_cpus</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a9ac5f8be32fd21569d9f27502d6edd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_runTimeLim</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>afe1eb0af6096fd910432b84628d553dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ShellType</type>
      <name>m_sh</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a3efa1758a91a66f0c7ec5e631ac9459a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_version</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a5a501e94ab74f5c5e23644143ce897f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_rootPath</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a4c640c4a9b124ed55d7a79c938ff6058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_mpirunCmd</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a30dd3c46bc8ccda178b14ba809bf9dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_inputOpt</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ad1138f60facd595556b0588cf8dd47cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_outputOpt</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ac8a0e919c8647763510b1d7876cebd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_optionsList</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a8691ee75a27bcf2c332cd0dd5ffe4ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_clearSnapshots</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a3e79604ca412f2bd7f91ae1d22471522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AppPipelineLevel</type>
      <name>m_appDepLevel</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>a1b0906d2f4f6b6c3ee648eaaba766bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *</type>
      <name>s_resFilesList</name>
      <anchorfile>classcasa_1_1CauldronApp.html</anchorfile>
      <anchor>ad9151ed8b990cf1a0a645dd6e43814b1</anchor>
      <arglist>[][6]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::DataDigger</name>
    <filename>classcasa_1_1DataDigger.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataDigger</name>
      <anchorfile>classcasa_1_1DataDigger.html</anchorfile>
      <anchor>a0eee80f0436103ab2051e03a24514c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservables</name>
      <anchorfile>classcasa_1_1DataDigger.html</anchorfile>
      <anchor>a517d1d7ca5da33ee6231fe14e564b192</anchor>
      <arglist>(ObsSpace &amp;obs, RunCaseSet &amp;rcs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservables</name>
      <anchorfile>classcasa_1_1DataDigger.html</anchorfile>
      <anchor>a291e7191aa2d1c72b8867dee561586b3</anchor>
      <arglist>(ObsSpace &amp;obs, RunCase *rcs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>collectRunResults</name>
      <anchorfile>classcasa_1_1DataDigger.html</anchorfile>
      <anchor>a20652ba865da8b3794156fbe9847d99f</anchor>
      <arglist>(ObsSpace &amp;obs, RunCaseSet &amp;rcs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>collectRunResults</name>
      <anchorfile>classcasa_1_1DataDigger.html</anchorfile>
      <anchor>a2be27b160b520108c180b436095b5e00</anchor>
      <arglist>(ObsSpace &amp;obs, RunCase *rcs)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::DoEGenerator</name>
    <filename>classcasa_1_1DoEGenerator.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>DoEAlgorithm</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TheFirstDoEAlgo</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632ba281fac8d75944e9c5af502ec1314f603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BoxBehnken</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632ba2e873d1b613da318174c70aeec807f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Tornado</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632ba165be644ea4ffe84fc3816b54e967abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PlackettBurman</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632ba514e266c6ed0bb1f512d868a9dcd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PlackettBurmanMirror</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632bad144a347ca1dfea7603388fb4abb8239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FullFactorial</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632bad6bf5b499a89883518aa6af8500b230f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LatinHypercube</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632bac6931347b3c59dda1bbb2056ea1e914c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SpaceFilling</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632ba9f0864e7421441af26f458fdc5a5b999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TheLastDoEAlgo</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>ac39a3df55efca555fdc7a02be88c632bab32458dbd2dadee25039d24ae0f56e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoEGenerator</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>a026cd51f49fdd06bfa09f6cdcc27c11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>generateDoE</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>a792d0c3a73403285d4b01aa447b5222a</anchor>
      <arglist>(const VarSpace &amp;varPrmsSet, RunCaseSet &amp;rcSet, size_t runsNum=0, std::string doeName=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoEAlgorithm</type>
      <name>algorithm</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>a02aefbc6f07485c296262c80df86238f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>DoEName</name>
      <anchorfile>classcasa_1_1DoEGenerator.html</anchorfile>
      <anchor>a8c337ffc87a64c714f67ebef687230a3</anchor>
      <arglist>(DoEAlgorithm algo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::LMOptAlgorithm</name>
    <filename>classcasa_1_1LMOptAlgorithm.html</filename>
  </compound>
  <compound kind="class">
    <name>casa::MonteCarloSolver</name>
    <filename>classcasa_1_1MonteCarloSolver.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>Algorithm</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a2b645e350513a4ca7e0c2ff5a53d7dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MonteCarlo</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a2b645e350513a4ca7e0c2ff5a53d7dfaaa7030c1ad9b5896bf20374435a78eabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCMC</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a2b645e350513a4ca7e0c2ff5a53d7dfaa7569a0a9fd9e6a1bd4b7c6b68a8f8f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCLocSolver</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a2b645e350513a4ca7e0c2ff5a53d7dfaa5249004ebeb8afb661acaa97c9dbb6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KrigingType</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a6c907ffba723ae7154ee0d678fd04a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoKriging</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a6c907ffba723ae7154ee0d678fd04a5fa8554bdc9d5829b560fa985bc8fcdc3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SmartKriging</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a6c907ffba723ae7154ee0d678fd04a5fa2b6f249d87d5b730a82b0c0b7ad69c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GlobalKriging</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a6c907ffba723ae7154ee0d678fd04a5fa0c7640a0675908bbab0034aaeb16c2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MeasurementDistribution</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a37493f9bd7c022f1bf70006a75df45be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Normal</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a37493f9bd7c022f1bf70006a75df45bea11e03200fe6e87003cfacf384ff6233f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Robust</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a37493f9bd7c022f1bf70006a75df45bea9711a6fd5898efb4f493552e961afb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Mixed</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a37493f9bd7c022f1bf70006a75df45beaa23e2938cceba60915342b6bdd841c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PriorDistribution</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a072759f74bd4c0a42c5975f7c2d40ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoPrior</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a072759f74bd4c0a42c5975f7c2d40ef6a9f27f0c5b734c1583af3186e2c0b54e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MarginalPrior</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a072759f74bd4c0a42c5975f7c2d40ef6a4ded07f284e666b28ea34f1ad02ff430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MultivariatePrior</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a072759f74bd4c0a42c5975f7c2d40ef6a4bba6fa35379b6b9635f90619db7934c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, RunCase * &gt;</type>
      <name>MCSamplingPoint</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>ab36c36aeebe6cefa876c24909a82a391</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; MCSamplingPoint &gt;</type>
      <name>MCResults</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a1290f2b54bdf681fa4f669fe7b3835b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MonteCarloSolver</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>af2005aefd980ede1a5ff7cfbb5f644b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Algorithm</type>
      <name>algorithm</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>ac95e5765651725c553a89db748b4e8b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual KrigingType</type>
      <name>kriging</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a425a129c3f36d8ed64c0dc7b0fc839cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MeasurementDistribution</type>
      <name>measurementDistrib</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a1492acecc108596985ff63f7fd602d0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PriorDistribution</type>
      <name>priorDistribution</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>aa5bd6993d06ead1edbb00296430d06c0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GOF</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a5f53058fd81d19bbe2bbf81519af5f2d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>stdDevFactor</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a147f49f9cac43586965815423e625704</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>proposedStdDevFactor</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>af9c7fcdbde478a80d0812213bac085b1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>runSimulation</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a93cf418cea930ec49be7c0363a017e9d</anchor>
      <arglist>(RSProxy &amp;proxy, const VarSpace &amp;proxyVsp, const VarSpace &amp;mcmcVsp, const ObsSpace &amp;obs, unsigned int numOfSamples, unsigned int maxNumSteps, double stdDevFactor=1.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>prepareSimulation</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a5344c94594d7b15ce90fa67ca9cc0c9a</anchor>
      <arglist>(RSProxy &amp;proxy, const VarSpace &amp;proxyVsp, const VarSpace &amp;mcmcVsp, const ObsSpace &amp;obs, unsigned int numOfSamples, unsigned int maxNumSteps, double stdDevFactor=1.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>iterateOnce</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>ab62bc0903fbc4e577f4579bded448a30</anchor>
      <arglist>(int &amp;itNum)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>collectMCResults</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>aa17412f127d3e74fa5a598d2b1729484</anchor>
      <arglist>(const VarSpace &amp;proxyVsp, const ObsSpace &amp;obs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCResults &amp;</type>
      <name>getSimulationResults</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a216ab89351fc60e8ff6a9642bcedc893</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>p10p90CDF</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a203427f5a27a1ed52a4431f7e6f207ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>samplingsNumber</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a67ba56bfe4ef23bd03f2cdf0bf341162</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>RMSE</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a57b49e904bf785889063109126aed0c9</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RunCase *</type>
      <name>samplingPoint</name>
      <anchorfile>classcasa_1_1MonteCarloSolver.html</anchorfile>
      <anchor>a9db297e9d1ea071f5d4b667ee43ea4ad</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::Observable</name>
    <filename>classcasa_1_1Observable.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observable</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a64dbb1fe98bdd9794958a7dc2d5d451e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a4b2533dec33b41ba0fec75d28b494006</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>af2c9cedf3a75320870e145fecfee403d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>aaee1f065d3f91ed22ae889a1d9e70b1f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>ac2ebf6254171a8995dce0c3f03f9516f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>acacc85e9c7a4155fd4455c64ab4a6161</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a02829a086ae8e4dc9bbd5249cdb47c73</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>ace5afa09f8182e330522e8389b19ef87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>aeeba6e802c08f50ccab69e69a880ea35</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>ac649a0c9a5765e3a93510305b0926d05</anchor>
      <arglist>(double w)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>ae97cbf5d0e62f89221a3238c5b9f8b3d</anchor>
      <arglist>(double w)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a8a245a6135eb3eca0015586b71246c03</anchor>
      <arglist>(mbapi::Model &amp;caldModel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a0af7863d52c62280dee93ee2d030044a</anchor>
      <arglist>(mbapi::Model &amp;caldModel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>ac1611add9ac1649cea4b71920f355d36</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>abcb883588593df7ccbe4d1962f11dee5</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const =0</arglist>
    </member>
    <member kind="function">
      <type>ObsValue *</type>
      <name>newObsValueFromDoubles</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a158d57481bf75c56e6477a7cffed6f15</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;vals, int &amp;off)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>transform</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>aba19b22273e1a8d321940f92788119ed</anchor>
      <arglist>(const ObsValue *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimensionUntransformed</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a3134566d16704120a6d255f96eec20e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Observable *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>af9e9e1b519ac22a29af6305dbcd45e41</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_dataMinerTable</name>
      <anchorfile>classcasa_1_1Observable.html</anchorfile>
      <anchor>a29fd650912ea76f50f1307f0f8eb6655</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsGridPropertyWell</name>
    <filename>classcasa_1_1ObsGridPropertyWell.html</filename>
    <base>casa::Observable</base>
    <member kind="function">
      <type></type>
      <name>ObsGridPropertyWell</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a7e8145f98bac5ae6a773de6146a90f13</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::vector&lt; double &gt; &amp;z, const char *propName, double simTime, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsGridPropertyWell</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a6eae04dfc37a6ec3d6be9cc4831573e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ad5dbf640ad689e0351e1d353871f6d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ace57bdf76b0ebd465ff797f50b1e24a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a885d8a7df53ea992d4ab108c7ea6717c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a0dec3d8ceb917c0bf80b37119fe0b09c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a73bc1614e7d60302e7c596725c1c7e01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>add21865787599169bd0231e320743b95</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>af34172341b2bf9bcc9e034a33105b855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>aa64e0071492040352abbc32ba720aea7</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>propertyName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a2696903dc14d34aee2095f431ce8c034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>depth</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a381b60616de06759f0ae1770feb8be43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>xCoords</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a1d1922749b1772f9da4d7945f597e3a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>yCoords</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a7f89e94a74b46cbafa1657be1d1ad289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ad1ce724c61c416ff5ef903596a20be3c</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a7d5e6dd6559bc2c4101db32934703292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ad4cdb0bbe83cb3f86bf7a90c34ceb60e</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ad850b458c987cb8442af33f2145abe57</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ac2406f73b2d116155ba109f4221cd4b1</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>abe2396aad662684df70eca9f5198f76d</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ab2e68a3a93f8e0865bba90fa05a92f3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ae0e169eebae6f7324fa0029cde27870e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a79967c53f8ba752611625c138b665fa7</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsGridPropertyWell</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a762bff753e448857e45eeaf119b12693</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsGridPropertyWell *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a22f4dfa859c51ff8137174076ffb8195</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::vector&lt; double &gt; &amp;z, const char *propName, double simTime=0.0, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a40b5906212f5d98086090079b2411772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a7c87b5c001a1c66e4b04e7d3bfb32f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_z</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>aeb8cb8a65f15cae733278e2d443d4564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ac303247fd3062bab699e7ea50b83c019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_simTime</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a0052e1922af69bc79b5a4812a004d9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a26c0c38bcf199d5da715b63b274875df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_posDataMiningTbl</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a44d47d34e4f6484707b5684ebfc58418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_refValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>aca813b78a72c047eccf8b5c887f7fafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_devValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>ad02dce236c00d89263a526babc4bd86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_saWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>af57ae2a4573834ce714b4e814eee180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_uaWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyWell.html</anchorfile>
      <anchor>a8c642217afcedaa0be418d3073166d40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsGridPropertyXYZ</name>
    <filename>classcasa_1_1ObsGridPropertyXYZ.html</filename>
    <base>casa::Observable</base>
    <member kind="function">
      <type></type>
      <name>ObsGridPropertyXYZ</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a35d7c5727fa4aae3ab94e87613aad3b4</anchor>
      <arglist>(double x, double y, double z, const char *propName, double simTime, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsGridPropertyXYZ</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ad4852f6753688107873120a3bf84ff11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a26971382eaf500aca06aef96ae229c24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>af55867f6c3124e3991fb3c42b4dbf881</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ab71b48793c374eaaccf8a47235ec1a0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a72b477a049b0772d5cdc67f3aae50bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ae2cf41e694f33218615ce898e81ff31c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a5d095e8b47a1f13b47d8e053236f6464</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a5914bae4af0051c7b00186eca278797a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>addf522b2c6709e82de9a65b16cb1b9ed</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a7544bf1b457f338272040638d3cb64ce</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a8fdad3e50969443bee733745b3239838</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>propertyName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a5d82695f1d78d74ddbf474c1d2ed6268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>depth</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a3679043ba53353601ce9e5b56e935ce1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>xCoords</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a1e50677b3380f06cb701070d0aa8a494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>yCoords</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>af6d98e8f3b3da59383749bb104fce8f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a02c457ad727c63dd5abf0679324bf9c6</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ad7a8e31a7b1da4339e8443918c94e9e6</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>aa2bf5dbfe919d5ea8bb065958a15ba21</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a2b7d96dd444440d65a9f396ff0819589</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ab1e5956267275f84715d8fd4b5ceb573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ab8fbb8bb964dd8afa73da271d099dde5</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int fileVer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a97c49b79b94b5951f9f02cc6c5e3ae0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsGridPropertyXYZ</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a4568021786ae2fa50969fe64faa87705</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsGridPropertyXYZ *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>af4c09a1b7b6a3d056c4f9a8fb344037a</anchor>
      <arglist>(double x, double y, double z, const char *propName, double simTime=0.0, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a40131e944b42e7e149b895a294f272d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a2caf415ece4b17f512de5756b88b7268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_z</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ade3ccefe4db8cb66e30027357bb2e50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>ac0be75b5161a78057eb89a7312581e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_simTime</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a77e5ff1d961d402071e69a4d9589d31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a810b2cbd32d2a4b6b5de2ae5b2bc5960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_posDataMiningTbl</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a0b6edc32e3b0f5f2df810cf7c9385db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_refValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>aef3643b38d954c7c0d5afffdab26426b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_devValue</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a0dad1795eeca1ed60f06279aabc8a97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_saWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a4dd1323c58048aa96c614766e7c52eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_uaWeight</name>
      <anchorfile>classcasa_1_1ObsGridPropertyXYZ.html</anchorfile>
      <anchor>a20af5cdc4c0a978703f7c32677770dab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsSourceRockMapProp</name>
    <filename>classcasa_1_1ObsSourceRockMapProp.html</filename>
    <base>casa::Observable</base>
    <member kind="function">
      <type></type>
      <name>ObsSourceRockMapProp</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a23c3b0ab2c1be9164bb72f19a1972184</anchor>
      <arglist>(double x, double y, const char *layerName, const char *propName, double simTime, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsSourceRockMapProp</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a35f9432d8afe49eaf170495d2c70f6ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>acd3e370af8b36cd0bec3bd3c988f8edd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>ac6ddc20ff66238c02818f7f280dccb4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>af914e2923faaaa2d80d5aebc292fa8a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>af43e62aac9bcb0fd242cb2c6130043c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a83476e0bb2676dfe36f925c11a82b894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a0e78f06dab90ff791079e6dee5e5cf6f</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a4fadc056cc4c0a050797062c5db00de9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>afb50cad6f7778ed27a9ed0a25e511dbf</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>abf0b307009680c0faf4326525b6faa0d</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a1b627e4ab5bb161472608f4019382276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a78ef8f38fa895306c694200c239fe6d2</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a421cffa66969fd96a32289d5db25e6af</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>acd74d6681bf4d65cdb310821ee4f9016</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a7a0fe889d0e10767f1fd7c563cfa2a8e</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a6e2276835ce73df0269058dbffc3fd63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a6353a2c850712600278ae5d5a3331863</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int fileVer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a44e020edc55576d6414c368f4c607832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsSourceRockMapProp</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a2b93eb5c765279cf4e75673ad237c99d</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsSourceRockMapProp *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a35fa6bb93ee4286c79356d303dbc8782</anchor>
      <arglist>(double x, double y, const char *layerName, const char *propName, double simTime=0.0, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a4d412c2a8eb3642926f86f6516335e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>abcab4d43f45179aaa51ca07bd801103f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>ae98641baafa5f078fcbb73a55ce84d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a6fc3540181bade78fe60272cf3607927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_simTime</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>aceac3fb9b76e47252094f6b2c8585a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>ad3c2c9c2d63fecc9897c1e4b75419fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_posDataMiningTbl</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>ab30ce45f89e2e72ca252b53604b654af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_refValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a5071c9c7ed85deac823ea5e96c5d46be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_devValue</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>ac18d25bc02f34e7101c7d7474816f182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_saWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a04c5e23a7f7c8d3e71ccc37e1f655756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_uaWeight</name>
      <anchorfile>classcasa_1_1ObsSourceRockMapProp.html</anchorfile>
      <anchor>a9073d8e0a790473708377e61034d9d3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsSpace</name>
    <filename>classcasa_1_1ObsSpace.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>addObservable</name>
      <anchorfile>classcasa_1_1ObsSpace.html</anchorfile>
      <anchor>a4227e19a1da2cf38ba2fe04fc673d22e</anchor>
      <arglist>(Observable *obs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcasa_1_1ObsSpace.html</anchorfile>
      <anchor>ab87a3ee3d6d06652e03c47ce8bd0c351</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsSpace.html</anchorfile>
      <anchor>ae77d87ba2a7a814301f2fe345384d67f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Observable *</type>
      <name>observable</name>
      <anchorfile>classcasa_1_1ObsSpace.html</anchorfile>
      <anchor>a0d0fa943a8dbd91c72d2e85133b7ac9f</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsTrapDerivedProp</name>
    <filename>classcasa_1_1ObsTrapDerivedProp.html</filename>
    <base>casa::Observable</base>
    <member kind="function">
      <type></type>
      <name>ObsTrapDerivedProp</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ab5c69d9087b9a66d39c45e727aa50e5d</anchor>
      <arglist>(double x, double y, const char *resName, const char *propName, double simTime, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsTrapDerivedProp</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>aad808062e06660c6860d315e57b306bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a4585602455f6af286a0bc46ed9369e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ae371cab2dfa9ec58a61d1634cb4c5d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimensionUntransformed</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a7a4757d7cd7fd67cc49cf4babb802e17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a8b6a6c3082f4d239ac082cae370a06be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a8f39a377f60909764af251c2e7c1f6f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>transform</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a54d31b210f6e2acdaee227d6a858da0e</anchor>
      <arglist>(const ObsValue *val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>aa61b3e283a9e908bcb0046e2cd748d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ab9a4fc979225cd9158ba99d0d5874131</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a58a2f994b699a24b43d6574196b4648d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a06a9f8fcd187eae1b8778769dd7291e7</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a8e52c880e65ae10ed68ddd2bff42cbc3</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a5735eddab871ab5d12b2c86dc4134c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a06480393b5017c8a592527522ad1bfee</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a3ce4f4fc75f768ec815f7f7a717fbc1a</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a371dec58223a512b0194c7f3342f3ee9</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a29975ca8545095e1ffdd92c0af6644dd</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a72a1c649a676e798adad8df8710036bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a0b14ca91657655a86fef3a7e5b081053</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int fileVer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a321060753b2e7f2a21652f95db9bf5f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsTrapDerivedProp</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a60d067377138b2f1db7a86c1fe6b9d44</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsTrapDerivedProp *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a5105c66d8708832df0032e65818b4cc1</anchor>
      <arglist>(double x, double y, const char *resName, const char *propName, double simTime=0.0, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a96011e9621208c68c1dce63f497796ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ad2c24256ea1dbcffb19f0fe501d7b3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_resName</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a2e2bd21c396ee4b19eef27a988597ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a3830ef95f9573e66e24241eb6a85dba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_simTime</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>af5b6ff411e1f61bc76e6b8de1c05fcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>aa3b643733d5304b932bd676bed5265e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_posDataMiningTbl</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>aa7f8de0bf48a9771886928745a828425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_refValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a670f8262e2d6e6b8f77143a854abb473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_devValue</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ad93220fb4131160d1f834fcfb62d2201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_saWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>ab0a8a4f6a1b6b660bf220d3c2f8da9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_uaWeight</name>
      <anchorfile>classcasa_1_1ObsTrapDerivedProp.html</anchorfile>
      <anchor>a22eb6a7a9e4b91131164c0d737d20258</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsTrapProp</name>
    <filename>classcasa_1_1ObsTrapProp.html</filename>
    <base>casa::Observable</base>
    <member kind="function">
      <type></type>
      <name>ObsTrapProp</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a721bf195a6868b3ede3f5aa0c8e2f726</anchor>
      <arglist>(double x, double y, const char *resName, const char *propName, double simTime, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsTrapProp</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>aab0d41f7d76aec3a0a5aa3c4d6309568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a94919b22ce5874f22e500cfeffcbd6dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a2a9804be88e9aed19cda867f4f8132dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasReferenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a853382dde1018d34845101efd8526a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>referenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>af2de1b5b36b234b8d045532914ac61f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>transform</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a89b3d534806b5d0acbdf2bdc80db52f5</anchor>
      <arglist>(const ObsValue *val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ObsValue *</type>
      <name>stdDeviationForRefValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>ad3fc05cd42f8e6b3e0363e698c8edb1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReferenceValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a4c1af3cdd5effd2f2a2c62bdfe1b478c</anchor>
      <arglist>(ObsValue *refVal, ObsValue *stdDevVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>saWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>ac53dc7865032252ebc0253be38099f51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSAWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a56d9d71a0f741595b6630c0b6868ae9f</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUAWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a47ff1c5b71438dd5db67815083c1ae55</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uaWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a7ccfd1821e08036f76bbc656bac675b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>requestObservableInModel</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a34da90cb116caf70749f5fc1eb817b71</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>getFromModel</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a988445a7eeb028e62e95a9af415b86b9</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>checkObservableForProject</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>aef5931c98cb0ddbff456224774f2b22c</anchor>
      <arglist>(mbapi::Model &amp;caldModel) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObsValue *</type>
      <name>createNewObsValueFromDouble</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a685d4f7da22f42e27233e46bdb1f7ef2</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>ac3a41ca61f1f29129548a1ae4aca18f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a3dc2539f173a9329708f50589e146d39</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int fileVer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a857fe861d257667cab355e63f7c38c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsTrapProp</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a58ad47e6fafa70f92007df6b04ba4752</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsTrapProp *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a6ca932b7256b64b7049c26ed569f50be</anchor>
      <arglist>(double x, double y, const char *resName, const char *propName, double simTime=0.0, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>ab4b44789682633d1ca135576c959affe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a65d1ba4ef8c766986cdfa81086949759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_resName</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>aaf48d1882d98f4614f8ca868a28f387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a83d47d00a2e5c5b130cb56102848edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_simTime</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a9739b4d71ae0de535cb185a73ac2b493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a73eb157c197bdd75b3c0261532950ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_posDataMiningTbl</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>afaa4e95e9f9195b5ffabd34d2c484998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_refValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a497d822d26088fc93a5c5434cbf62eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; ObsValue &gt;</type>
      <name>m_devValue</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a68d9368838ace148f10b49efb5ddfa78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_saWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>aa3f8509b718d12611bb1434d48424d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_uaWeight</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>a7ba0b5421ccd052206290d566757c9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_logTransf</name>
      <anchorfile>classcasa_1_1ObsTrapProp.html</anchorfile>
      <anchor>aac316642f80f708f074d60e4715084f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsValue</name>
    <filename>classcasa_1_1ObsValue.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsValue</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>ab5c0b127caa11d5461a90a80850a349a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Observable *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>a60af5631da70724ab939075a482e3ebc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>MSE</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>ae8d5881435676896cb189e8f183ad9ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>aea54aceae4a2b996cb9a75868570cbd4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>a7af31c8fa77bebaba0f6b3a7d80446bb</anchor>
      <arglist>(bool transformed=true) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsValue *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1ObsValue.html</anchorfile>
      <anchor>a68b81fad110fd11f55dd24dfc0cd0adb</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsValueDoubleArray</name>
    <filename>classcasa_1_1ObsValueDoubleArray.html</filename>
    <base>casa::ObsValue</base>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a8fbda44994da2e6407b63a191796cfc8</anchor>
      <arglist>(const Observable *parent, const std::vector&lt; double &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>adb3af29d9efe65591abd890afb0de30f</anchor>
      <arglist>(const ObsValueDoubleArray &amp;ov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsValueDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a157579ea74e77640491bcf75b92d5e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObsValueDoubleArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a70b4a4cad650ff8fa158ed89231a17f9</anchor>
      <arglist>(const ObsValueDoubleArray &amp;otherObs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Observable *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>ac11e66e2dff73350951d6b3ed40eb392</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>MSE</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a1aa0e09434ebbd48c6dad8eec52793d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>af7684302fbe3d1e6bf822296eea37515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a9e518bee3f8560c212418bb18239c303</anchor>
      <arglist>(bool transformed=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>aab772387409ee9c15c22f42ef72bb3d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>aa856b793344cd854f416d8ca46ac47c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>af6586c84d366c6e53fecf2c8852a870f</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a6fc9e9b6c31b68a02c9f7a6202c21324</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsValueDoubleArray *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsValueDoubleArray.html</anchorfile>
      <anchor>a142db1d3b3bd9ce082ad99a25a78e7cd</anchor>
      <arglist>(const Observable *parent, const std::vector&lt; double &gt; &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsValueDoubleScalar</name>
    <filename>classcasa_1_1ObsValueDoubleScalar.html</filename>
    <base>casa::ObsValue</base>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleScalar</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>ad8da42beb542b802bebbaed2a3b49f2d</anchor>
      <arglist>(const Observable *parent, double val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleScalar</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a1e4ff2e22354ff553e6d3269c126484b</anchor>
      <arglist>(const ObsValueDoubleScalar &amp;ov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsValueDoubleScalar</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>abbfa1c23f3bb99667711a113af7a68c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObsValueDoubleScalar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>ae78f252dff8667c920bea00e87eace97</anchor>
      <arglist>(const ObsValueDoubleScalar &amp;otherObs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Observable *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a92a495a0a23e334050b3c0b24d2f13d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>MSE</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>afd66cb091293b31f16017d96df58b925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a749604f4d7e32eff70c950fe9090412b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a4c81be8d8ff754cb0c26b215cce16a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>abefd7993e55a31e1c4bf823007629a41</anchor>
      <arglist>(bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a2935bc7833de71872f309762f3b8edfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>aa2b2a4a2bda8f41e129bb73bc62bf239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>ace08f9c140274f8f96f3a5d64a00485d</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueDoubleScalar</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>ab428c171805a142d0aa864f1838e802b</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsValueDoubleScalar *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsValueDoubleScalar.html</anchorfile>
      <anchor>a35d1f660d0081b9459fde0dac1183c7c</anchor>
      <arglist>(const Observable *parent, double val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ObsValueTransformable</name>
    <filename>classcasa_1_1ObsValueTransformable.html</filename>
    <base>casa::ObsValue</base>
    <member kind="function">
      <type></type>
      <name>ObsValueTransformable</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a69ccf16ec8508e9933c75a72881a8d73</anchor>
      <arglist>(const Observable *parent, const std::vector&lt; double &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueTransformable</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a8a630ceaf9fa57e221e64c2e6a9eeb97</anchor>
      <arglist>(const ObsValueTransformable &amp;ov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObsValueTransformable</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>ac0e25b7bd18cfcb9229d6db50784c826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObsValueTransformable &amp;</type>
      <name>operator=</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>ac61e713ae92cf99896517cf7c1278409</anchor>
      <arglist>(const ObsValueTransformable &amp;ov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Observable *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a57ab69d18c8fb1c2da816475a0a95c8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>MSE</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a147993601b76f94c2d2fccf844d90bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>ac02588f89e29d43b3b2355347762d8e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a036e5943509f15aa8c00f0da2b8e4d97</anchor>
      <arglist>(bool transformed=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a68ef4fc7b6f8e81950a5ca2bc3a49f3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>acff473f12ccfc35e12ffa9d02cf381ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>ad9b4a572e83a9cb9a0d3ab8b5326c61a</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObsValueTransformable</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>ad827b031c07808f242e21cb89f9dedb7</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObsValueTransformable *</type>
      <name>createNewInstance</name>
      <anchorfile>classcasa_1_1ObsValueTransformable.html</anchorfile>
      <anchor>a8602a4f87607a7a38d974dae6060f171</anchor>
      <arglist>(const Observable *parent, const std::vector&lt; double &gt; &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::Parameter</name>
    <filename>classcasa_1_1Parameter.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Parameter</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a167c97ea91f7ceed5968bdcc6113400c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>afe2cd9e1c8242ee4e85c755807483043</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>ac27f0edd61ef17bbc23a7920581bf9b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a2366ea7b19788ce256e28f1ea5d8babf</anchor>
      <arglist>(const VarParameter *varPrm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a3e9b7f38d0ed15f5f2883f37ca97158e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a49c305a11220e6684a965508709ba660</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a2e842a67b535655e89ff7848ece01667</anchor>
      <arglist>(mbapi::Model &amp;caldModel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>ac4f89b28bb90acea246579830c0fe232</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a3aef6e9c60997ad5e6c804411f4bf4c1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>af0850f1244c42535ecc063cb9a560ec3</anchor>
      <arglist>(const Parameter &amp;prm) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator!=</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a05a31cd3e5e849c2abb213cc79016635</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Parameter *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1Parameter.html</anchorfile>
      <anchor>a26a76084d115f7124d8c5ad2cf23618e</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>casa::ParetoSensitivityInfo</name>
    <filename>structcasa_1_1ParetoSensitivityInfo.html</filename>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; const VarParameter *, int &gt; &gt;</type>
      <name>getVarParametersWithCumulativeImpact</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>a3ab705e7ed5e28b950ac6b3beeb7de1f</anchor>
      <arglist>(double fraction) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensitivity</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>acbfebb11a0d3aa0d6020d9a3282f3350</anchor>
      <arglist>(const VarParameter *varPrm, int subPrmID) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCumulativeSensitivity</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>a2442b51b02b214381a2a37f2e7939007</anchor>
      <arglist>(const VarParameter *varPrm, int subPrmID) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>ad154e5c84faaa6b8b0c1e8c0e231d201</anchor>
      <arglist>(const VarParameter *varPrm, int subPrmID, double val)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const VarParameter * &gt;</type>
      <name>m_vprmPtr</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>a18542341493411bdef973e4254d621d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>m_vprmSubID</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>a674245333c473acd2775f8245100a258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_vprmSens</name>
      <anchorfile>structcasa_1_1ParetoSensitivityInfo.html</anchorfile>
      <anchor>a0b0773959f30c92bdfda7f67faac90d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmCompactionCoefficient</name>
    <filename>classcasa_1_1PrmCompactionCoefficient.html</filename>
    <base>casa::PrmLithologyProp</base>
    <member kind="function">
      <type></type>
      <name>PrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>aa3d4e51601f8bf10593a7d9e68772fe6</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::string &amp;lithoName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a8699eb331626312c76f471c1041ce319</anchor>
      <arglist>(const VarPrmCompactionCoefficient *parent, const std::vector&lt; std::string &gt; &amp;lithosName, double compCoef)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a735152d08d9f8c66c351f622e9d2ffe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a78e00822eac409848bc39e7f81f7c437</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a76d1f9a6d2a024a74a5fb5a667f6e5bb</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>ad02799c440f160a46ddaaf122958117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a8c57af9657689b9515e196995bc7fd0c</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>a5254e7dc528b4fb69c4ffdc84390dc81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1PrmCompactionCoefficient.html</anchorfile>
      <anchor>ac1466c1c46a602e82535d41fd1ea0f98</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmLithologyProp</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>acab96966b8f67e5dfbbd2542a1f41ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>aefa4d91ed29ae766a3079e5601b75b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a6ed6758a61555eeca89f7363d6c8775c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a41ec5c627a6e5a144942a3da4a562e3e</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a0aa40e6ead511e30da747a1eb3c8217a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>ad8d5346c50260b40bac21a2ca8bc3bc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a8bdd615f90ff7faf43853b59219c70e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a44c892eee65e58486190ad63dbc1043a</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>afae739c9aeb3fc458816bd0373b69a8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>serializeCommonPart</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a5635b35c261445cdd204761378161299</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a5ef4629d471db21a3b717279c6541f8e</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrmLithologyProp</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>abbefb1036365ccc1e4a4c5e72be87585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrmLithologyProp</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a2ee2765564738da9b051f3d0b8d71add</anchor>
      <arglist>(const VarParameter *parent, const std::vector&lt; std::string &gt; &amp;lithoName, double val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>abd6ca8ee1e776dfc0920c23d9ea117d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a320fd19563f817d38bdaab52191b9346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_lithosName</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>ab4de887867e5e586b02f36e76a559b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>a50f12e85afe5621e0ec8e74b841518b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_val</name>
      <anchorfile>classcasa_1_1PrmLithologyProp.html</anchorfile>
      <anchor>af2f355f5d89f40b89b4feeb018485163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmCrustThinning</name>
    <filename>classcasa_1_1PrmCrustThinning.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmCrustThinning</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a0d5325274bd72f803724560a18377da6</anchor>
      <arglist>(mbapi::Model &amp;mdl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmCrustThinning</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>aebc020c884f537a53954034431605e6d</anchor>
      <arglist>(const VarPrmCrustThinning *parent, const std::vector&lt; double &gt; &amp;prmValues, const std::vector&lt; std::string &gt; &amp;mapsList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmCrustThinning</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a8f700bd63bcb6afb529550921d9fa2c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>ac74da7485155dc505dfdaef9fd696c1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>ad4ce3e386698ee4ff5d5b37d7d964015</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a7262a2f7759776cc18014ce70c0dfd38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>ac64ff0c5dd7b3480df394c70aa76fcd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getMapsList</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a5c1159ac0563b2c6043bc0e94374514e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEvents</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a1c395c26ba675f1e3d344e3c6c6d6e54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a6aff75a938c9ea9fd37bb522e08e885e</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>af47c87daa098d2fee0968b8818e412d7</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a185be868b9275c302cc451f2b4e016df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>aa647fc5a440884267ee6d78f2286ddfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>aa3c1f8362c372cda0927fb99268660a6</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>ad2991eb5e4fb0cea7677b682c9b50fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a3c16afed6de4f99de57dbb34dc3f7e9e</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>aa69340e702a7c15d1bad038ff9f08360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmCrustThinning</name>
      <anchorfile>classcasa_1_1PrmCrustThinning.html</anchorfile>
      <anchor>a8aec809177153af97f946d2264f6663c</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmLithoFraction</name>
    <filename>classcasa_1_1PrmLithoFraction.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmLithoFraction</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a58be9ec994f2dc657ec876a0e6af8e63</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::string &amp;layerName, const std::vector&lt; int &gt; &amp;lithoFractionsInds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmLithoFraction</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a989bbda2289f1b0b79429f3b604e41a9</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::string &amp;layerName, const std::vector&lt; int &gt; &amp;lithoFractionsInds, const std::vector&lt; double &gt; &amp;coordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmLithoFraction</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>af6de93b0702c71c18c8834587a8b61c4</anchor>
      <arglist>(const VarPrmLithoFraction *parent, const std::string &amp;name, const std::string &amp;layerName, const std::vector&lt; int &gt; &amp;lithoFractionsInds, const std::vector&lt; double &gt; &amp;lithoFractions, const std::string &amp;m_mapNameFirstLithoPercentage=&quot;&quot;, const std::string &amp;m_mapNameSecondLithoPercentage=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmLithoFraction</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a81c6c71639f861458d3b7392c86f1c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a6e1f181d6b04684b8095c89417cec4e4</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a07f9dc7ddb003557272375a4ef31b294</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>ad6c3dc97827250b0c1268218c6392ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a344fefefa450406b788154e201ada1f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a171e34c2e6257f6e89642b8eed5a2854</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>af3109560b6b24ca50e6a87a8b7e7ea43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>aae02fee917fed173af6f27c17df50158</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a70bd537abb93167b5ee5e13ba72ba2c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a83aebaf5fcb16b634adb582fbc6a5d3d</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmLithoFraction</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a1ae19812675dc060b24fa7539629ab03</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a858fabf0fd9dd9ce380e0e519b79f93e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a374d1ea71e4daa5570a364667c4fee55</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a320242f493f449d6dad6d608aae61c4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>layerName</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>accf56c17d2932b3ac83e87f2e32c9a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>createLithoPercentages</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a873ed987286966976c24ba93e29a93f9</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;lithoFractions, const std::vector&lt; int &gt; &amp;lithoFractionsInds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>createLithoFractions</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a8b12e7aa1c88fec1ed7fee0a8c63f2a3</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;lithoPercentages, const std::vector&lt; int &gt; &amp;lithoFractionsInds)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>aea97d5131e46e43beb6f0498bbb0498c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>aea8021d7a6fc2235f5138cb90b77897b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>ad0ea58d57a39332f08cc5e5e545a302e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_lithoFractionsInds</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a16cc7b98ba07be732a2b4e8980162c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_lithoFractions</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>aeb3d9132cc234e8a5d8ed1f91b84b8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_mapNameFirstLithoPercentage</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a9831d37f7e97185cf64c6b8909339306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_mapNameSecondLithoPercentage</name>
      <anchorfile>classcasa_1_1PrmLithoFraction.html</anchorfile>
      <anchor>a1b3a019190f220f4a7ebaafe1cf2a65f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmLithologyProp</name>
    <filename>classcasa_1_1PrmLithologyProp.html</filename>
    <base>casa::Parameter</base>
  </compound>
  <compound kind="class">
    <name>casa::PrmLithoSTPThermalCond</name>
    <filename>classcasa_1_1PrmLithoSTPThermalCond.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a4c0560b2965b40786aa00298a0fef5b6</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *lithoName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ad9ce96ca4365fd3a01137e30d34add9f</anchor>
      <arglist>(const VarPrmLithoSTPThermalCond *parent, const char *lithoName, double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>aa9fc79923d6b39be30ada0e56526b274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a7c7e61c00ff893f99ab9b8a5e66d399d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a2faffad809acdef08cfc1101500d82fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a36f8c211f8ca64b58f9443cc66f28b35</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a14f2cd674d4d6fb034de3d6202fd7726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a8edfcdacdf572e8ca981f4f1d45e406c</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a3d0f9e821a53867db4f28d111f9f4efb</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a045d07e1b3148833785c42a8f2bd35fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a1c55aaa20b6855694d233b8a8406eab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ac7296188b1d09b661ba00519cf24ad0f</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>af7688dc9e90de85d831cd7e7e3b55743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>af6c35f94da02df11efab13ac9889074e</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a9f7ea416f3ba1b2b5a01b51a57d261b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a8da40b877885063df76d81559923de88</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a7f68a655b1c1d2db87dcaf0cd7edb23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a94a23a27de733d40a99e93deda268cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a9c07bd59edf9c61056e726ef4b69ff7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_value</name>
      <anchorfile>classcasa_1_1PrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ae40f6d1120a0d6a1f06c61ecd9407d2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmOneCrustThinningEvent</name>
    <filename>classcasa_1_1PrmOneCrustThinningEvent.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ab2de7867724a80edc8f03bbd38432027</anchor>
      <arglist>(mbapi::Model &amp;mdl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a931843fba62178bdfeba1bb479625cea</anchor>
      <arglist>(const VarPrmOneCrustThinningEvent *parent, double thickIni, double t0, double dt, double coeff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ac677832b6576d6b906ac523b25ca164c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a52abff677e9787b195c5e2362c324e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>af237784c1edc44bdd711f398ec050e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ab9ea2637159b71885a156a05d12cdc22</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a2edbb2d7a5bbf8c9a44462b255845a03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a709fdebe5ab17573decd0025fa9042ee</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a311b52246a1530fb53213ba4bd240ed1</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ae62e447eeb94e30a9f7aa8a6e17e2c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a52843c352ed731f3a4949a1f3384db60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>af18b8bf8e0a534a8d935fe112b5b72ed</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>af7f33b7ef2ae5f04110748fdb45a41c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ae2b1267c9ac2cfa268d8485a0ba6ddd7</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a25db4ad059ee30a93a33c7458318a859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1PrmOneCrustThinningEvent.html</anchorfile>
      <anchor>af6969701cc774ea3669efe92a001684a</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmPermeabilityModel</name>
    <filename>classcasa_1_1PrmPermeabilityModel.html</filename>
    <base>casa::Parameter</base>
    <member kind="enumeration">
      <type></type>
      <name>PermeabilityModelType</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Sandstone</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1a4bd4c0b58a7cdb4585f304b8107c6d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Mudstone</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1abfbb43a35e66f2a3b0907f0c5f923da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>None</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1af11b12436714408a1f6399507e20c79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Impermeable</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1a6bc51ce9cffa3637b97f5db0e6c1fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Multipoint</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1a299cf2702fe25d0e745c0a465b03bdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Unknown</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a01dbf74250f2f16a272e59b5ee8b60e1a512166f5ea24d130c5aa6ad1ec7434d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PermeabilityModelParametersOrder</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AnisotropicCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804aeaeaaaac38d1d42e08eaf2512981f6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DepositionalPerm</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804ad604db0c6828e190c4e1f9d24ff2b9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MPProfileNumPoints</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804a808436d4725f269c0f1ba239677479bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ClayPercentage</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804a1a954f62cd7ebe4e49b5af1b7467bd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SensitivityCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804aa70e6d6ddb85496f35e19fe9e63be6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RecoverCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a499930da6b5494c77da1facbb0a0a804a85c040ac8989b7301ae39ab0c084852c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a595651c0407267b2ddf9151126f00b38</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *lithoName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a3b59a7edb70a03e22cb24663cfb0d5e7</anchor>
      <arglist>(const VarPrmPermeabilityModel *parent, const char *lithoName, PermeabilityModelType mdlType, const std::vector&lt; double &gt; &amp;mdlPrms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a3859b4e759889a72d28ef47b88b34864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a2cf95195d84435efc42d7fe9dbbe0a60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a1b8d89bea44bddafe053b8f0863be0f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a4058af0f31eca033fd634e153bb5889e</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a8bc1bab2fa5e3a3add7be48dc1aaee1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a3c32b2b2acfc44b83853c94f6140a06e</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a882a0e396ab7a8f16fc5f3ab3f0cd7d1</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>afbf382a20db942b7388fa4feefc6f539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a5134a5c0ecbc947267a8c852cb57e591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ae115d678cc26c000010e4449ce4780f6</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariationPosition</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a0a8725ad2dcbc7d8749c568cf69b15b8</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>multipointPorosity</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a5519fde14989dc6fe80c7e8cfb76b92b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>multipointPermeability</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a47c7f52e8c4bf120576ef0a07ef653d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ae67a26cb2559caec3c7b547ef18ecb3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>afba65323d54e9d756baaf1fd0607e717</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a3372e42c49070e6a1ccd6375b57f747b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ab9ff2a348a2c1d10388d4dfe41a918eb</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a046a88b93b8e4a852c451ccb680a1b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a0917a9777730d72275a3942c599a50b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PermeabilityModelType</type>
      <name>m_modelType</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a13c4eb6889f388ac15286439fa9c7072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a2c8147cf7db31f1597c6b7ed6d3cba78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_anisotCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a461013ec49d2d40d0c9c0b170aff4cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_depoPerm</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a104960d68987e77b2d5f43393942ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_clayPercentage</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>a627a399059217800ae03bb392f433fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_sensitCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ad4ae66715c227a552e969831f980fc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_recoveryCoeff</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ae337d80e3068dfc9e7d023582eb7dc96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mpProfilePos</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>ab9a68ab4b1f3d883377501899f0a418d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_mpPorosity</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>aba6d862881bbfe2d5d34d7ea2ea9a2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_mpPermeab</name>
      <anchorfile>classcasa_1_1PrmPermeabilityModel.html</anchorfile>
      <anchor>aa7062ff98cb931f311412ed21499cffd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmPorosityModel</name>
    <filename>classcasa_1_1PrmPorosityModel.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmPorosityModel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a3e4dbabda6f60788a5d5f435632eda45</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *lithoName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmPorosityModel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a3c28a6728c3f6b24e7ab0d1fbaf39baf</anchor>
      <arglist>(const VarPrmPorosityModel *parent, const char *lithoName, PorosityModelType mdlType, const std::vector&lt; double &gt; &amp;mdlPrms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmPorosityModel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a320a8dffdff9cd38dddd3d1121bfe917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>af8e5e97a5d5a5733f1641ead754d348a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a0f86ba06affacd46236827e4347c62a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>afdc2d04be6d4af8ca01de39679683b18</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a1362f2b58f1ccc026172c29dceb0c79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>abb3dcbd8d83da210de43a865e530c1bb</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a6982b581183b6172d6867a5a02eec4e7</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a7f0d59adfbb12388374e9e1f2c256166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>ae599eb001751479f3d7191aed6443eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a3fcc5dd6000ec794a3c730abd32bec8e</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>ae21e16f581fd1299a79b4cbd1232bb58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a7acc1389b468d0e634fdb1e34b0bac8f</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>add1e3592668e2fc6d03820d687b67301</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmPorosityModel</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a79b3c3be1e01590b554c4cdb882bad5b</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a3af33bb7fdaf23d7d93e3f8f706c031a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>af9b096bcae70b4e9376d9692eb2ac7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PorosityModelType</type>
      <name>m_modelType</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a8cf482d8b5957e0d514939a4498e9fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a901842d87e6ec2fd6699df4715e6769a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_clayFraction</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>ac16b16a25e40e2512d31ab9b036a0cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_surfPor</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a04c5f32dddfc54fdf13e68d85ee77748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_compCoef</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a8e9fe0d74d697f4042998632d7a28315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minPorosity</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>ab328d1e61d6b4a084a7bab2335301e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_compCoef1</name>
      <anchorfile>classcasa_1_1PrmPorosityModel.html</anchorfile>
      <anchor>a141197f91a3c6d2fd5edb6e4493e145f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockHC</name>
    <filename>classcasa_1_1PrmSourceRockHC.html</filename>
    <base>casa::PrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHC</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a2bcc43736a45a8b59ab00646786c5f4c</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHC</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a206c815f4bf53b0e4326cf093d615ecd</anchor>
      <arglist>(const VarPrmSourceRockHC *parent, double val, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockHC</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a8f999da36458970aa633a61d3c6b405a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a7f831ba67dcbb3e64926a81b4b7a1106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a831dbdb1a92540f8094a5f34d77aa654</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a7732d54cbddae61d71c5c51d7ac9613e</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a4d620557dfc9c78835dd4c34b8d6f1a2</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a477a6a5e8d222837eb683fc26fc81bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>a690738ca65d96400ec4cd5b7de4e71d8</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>af5b1ab6378704a271d19c4a4fa468fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHC</name>
      <anchorfile>classcasa_1_1PrmSourceRockHC.html</anchorfile>
      <anchor>aa50e084ec4093c19f37b495ef3d502b3</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockProp</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>ae6aec49d0491f340f97b9c98fa6c76de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>abd28ee32b021527e3b82459b2de31afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a59b88ada29e117a3faf8b6560089b8d8</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a596d48bb8254115fb7d09757c30c3857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>abbd4908f85a2b9551862956248563d3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a94e2dd733bf463fb58d4be93cf3be9b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mixID</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a63d9d5df0c67516164c25dd3b89c6a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>layerName</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a4f9c4a3dcb7d83ab29f2bb5761071837</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>sourceRockTypeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a62859f8b50129a12fb65d710aecbb63e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a6fa8bb092a44afc739b58fafa6bb8273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a3bb372363ca8c7ee0dfc35e710387950</anchor>
      <arglist>(double val, const std::string &amp;srTypeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>serializeCommonPart</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a841a20c6d9b107d67e9ee37e07915ead</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a88c21056b25451c39a68b32edb71dc5d</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrmSourceRockProp</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a2d93b0cc38b7e6ee3cdec65ed5c5e577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrmSourceRockProp</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>af2f19e476c5cfb2c80a6caa2d84bb1f3</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *layerName, const char *srType, int mixID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrmSourceRockProp</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a51bcb665cbc218c6054f9c6942f444d9</anchor>
      <arglist>(const VarPrmSourceRockProp *parent, double val, const char *layerName, const char *srType, int mixID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>af4b105cc23b74ac911e4979ba72a8034</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>ae7ee23315acf48df6c3ac10266410335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a8c7324ba0fd391cc3f97ad5e82c83097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a927a001a256c1918bae0026b6c58ec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_srTypeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a170975a91ea338696144d066b04e8ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_mixID</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a461306c73f8e09eba206b494d2903b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_val</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a28bb3323b7599667d330e42c882c2acf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockHI</name>
    <filename>classcasa_1_1PrmSourceRockHI.html</filename>
    <base>casa::PrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHI</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>ab793b834e31db9b21727593e551f28df</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHI</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a084522edaa01081c11e1a9cdedcadbfe</anchor>
      <arglist>(const VarPrmSourceRockHI *parent, double val, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockHI</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>ab865da8afa5f1ff07b0e464c7d9300cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>ac9745cd634b3d265a03d7e0f54799f9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a74d20240333a979b580ac1d9bd9a1bcc</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>add0f7f799936190f5356222583e377c6</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>aa5006ed80857a7d6d763a74587e56bf4</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a8aac1008de4275d00ba94959dcbc78a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a9146db85f60e8771cba82cb28710ac8c</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a869650b8fb78908947a98cf12fd4766b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockHI</name>
      <anchorfile>classcasa_1_1PrmSourceRockHI.html</anchorfile>
      <anchor>a5d6a7de373f1c6deb32de4cec2226e04</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockPreAsphaltStartAct</name>
    <filename>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</filename>
    <base>casa::PrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a54c73794d1635f123d6df143bcb886d0</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a4ea379e800ad231935dd5e677446c2a7</anchor>
      <arglist>(const VarPrmSourceRockPreAsphaltStartAct *parent, double val, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a04b66d0cd06891f74f24292104500953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>ad5bc4f320981c40c92444a4a72e2f99b</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>ae0526211192d3559e31c5f67b3dae5b7</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>aef531e8be8749fb65e03226d80aef6ed</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>ae8e65710a23b06cd4a032cdebf71b94d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a903020a6ccb85d96571965e136af63cf</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a185c3b97f54719f6f231992c9db493b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1PrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a935c3032acd967e33d591e0e2cc0c901</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmSourceRockProp.html</anchorfile>
      <anchor>a3211104bf226fbeecc5a443dec76883b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockProp</name>
    <filename>classcasa_1_1PrmSourceRockProp.html</filename>
    <base>casa::Parameter</base>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockTOC</name>
    <filename>classcasa_1_1PrmSourceRockTOC.html</filename>
    <base>casa::PrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>aae7e03f7324f8ec74462cfd73be8c16a</anchor>
      <arglist>(mbapi::Model &amp;mdl, const char *layerName, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a1bdcf8813d771f1e725cab187163caae</anchor>
      <arglist>(const VarPrmSourceRockTOC *parent, double val, const char *layerName, const std::string &amp;mapName=&quot;&quot;, const char *srType=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>ae7d5364f45754295d7cb3c9513e95179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mapName</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>ad06c7ecf97142be6384c2137f6a2eb8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineMapsRange</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a8a6952ae52fb48fc33ded8d079bf83d7</anchor>
      <arglist>(const std::string &amp;minMap, const std::string &amp;maxMap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>aae04177a089d07b9987a4069d14b2d92</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a655f87d9a088b283ea214bd0a69da3c5</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a401e1ea5d1bb9e5a34add975620b37e6</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a43b846d4581f31cdd59efcc06fd84331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a76c3b6cd7d5975b6e0e6c8e81b8b4ee6</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a447c025a249089378f4f2b57f054d35e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a6515e13366af7f35e329de7941934d8d</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_mapName</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a8f18bbe0ddd86f4c95bf07220bc89dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_minMapName</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>a28e47dce77f9f2187d610fda0437bc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_maxMapName</name>
      <anchorfile>classcasa_1_1PrmSourceRockTOC.html</anchorfile>
      <anchor>af08864fec21a0f6177e717847cbf3a89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSourceRockType</name>
    <filename>classcasa_1_1PrmSourceRockType.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockType</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a2d97336ad09484b830e2fb570f8cb034</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::string &amp;layerName, int mixID=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockType</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a6f04efd87e389b9ed1f9a0152d349dec</anchor>
      <arglist>(const VarParameter *parent, const std::string &amp;layerName, const std::string &amp;srTypeName, int mixID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSourceRockType</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a84ca77f190f31d24bc1baf4ae503286f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ae05c379244c64cbc7cb9b52f20510620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ac3f7b155d196da0ead02f973cc64dbb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a16799e34aeff1a2327d3018c26b45902</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ac55c1a629cabecf332c32b0d8bf0bd52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a79599a860ab6932b305cb201dbb234a5</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>af7f17690dabae73479038d21e232d753</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>sourceRockTypeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a8dcb29b30e7450599e76ccee41021af0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>layerName</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a955597a34024b0695d9e0f4f58344354</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a99ed93ed4c4d22317b0e6053af8647e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a0f1ce6339ea5ed290332be5131884288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a25a87e7c4b6b3ba30fd020fe350df8c4</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a67c7eb3cd96611a5eefe8dd0cbec4e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ae9d65140db5e59e242aada589a9b3e94</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a0f5a3e650a63e6479b26a4720600f41d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSourceRockType</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ab5abc8f985dbc109164ec624ec38c097</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a90c683359afbcbf90281ee9961cc5f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a59a4201476c75ac37e0e572037e9d5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a65323ade93a791959d67c624d8ea5366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_srtName</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>a2a36d59d2dcb6728aab663ec14f53f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_mixID</name>
      <anchorfile>classcasa_1_1PrmSourceRockType.html</anchorfile>
      <anchor>ae8cb649210c3d30582024aa3389bc60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmSurfacePorosity</name>
    <filename>classcasa_1_1PrmSurfacePorosity.html</filename>
    <base>casa::PrmLithologyProp</base>
    <member kind="function">
      <type></type>
      <name>PrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a14e6ab2468d2e27e5f2917d7627293ba</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::string &amp;lithoName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a2e22a3d8171a9d7183c4c900a6e30173</anchor>
      <arglist>(const VarPrmSurfacePorosity *parent, const std::vector&lt; std::string &gt; &amp;lithosName, double surfPor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a4387449490ddab6a0b9a732255554b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a8623d5dc1e3cfe287966659b299741a3</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a3d3fdb691e4af69d580d26a3c30b9053</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a08b18afde903dee3d8440a686c01ea5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a04e659a1f18186c89ad64c28d16e068c</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a9f9d21df72c421f33c1d131417d1e257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1PrmSurfacePorosity.html</anchorfile>
      <anchor>a05283dbcc08c95f0e7af900a165e3340</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmTopCrustHeatProduction</name>
    <filename>classcasa_1_1PrmTopCrustHeatProduction.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>af94e51f8bb72e68acb7a7441bc3819a3</anchor>
      <arglist>(mbapi::Model &amp;mdl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>afb733179d6df9146be7596d534c6d99c</anchor>
      <arglist>(const VarPrmTopCrustHeatProduction *parent, double val, std::string mapName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a7656d250ee26713bb29d6c9efa42f130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a08af060ff631ef6dfb55772d112453ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a1a08c1443a48908130de5ebe549448ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>acb2f5398710e6d9b2f2109fdb52f50fd</anchor>
      <arglist>(const VarParameter *varPrm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a3cddce78703db9de49aabc7ea87b2088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a65acd507a59cb2919c5dcfe5cd0bb79e</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a2f5580de7026d6cac156ce676fcfa662</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>ad73d5ffc9fa76c7b52ff48d4c9cec920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mapName</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>abe58024f7dba4f5384dbf3a27a41dfbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineMapsRange</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>ab47ae7578ed64165a8878d84a3d0fe3c</anchor>
      <arglist>(const std::string &amp;minMap, const std::string &amp;maxMap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a4e65aa6d4f5a092a699b62a8ed94e5ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a7bdefc968ea5111d6203db10884cc6e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a753b8d1ec66c8850c6c41c4fcb2da1ee</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a4b86e48a49891b5f47d73bd1a8627035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>ad907f37344030125d4d4a68d1460e141</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>afa3f755a80bd37bd6ebdfc46f2a90281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>abb116728fd2d06a6ae39a400d0db0678</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VarParameter *</type>
      <name>m_parent</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>aacb005ada8c785c279980ee79e2efad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_value</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a4b44b812ae522a89f1d69ceb08ae9135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_mapName</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a84aaaa975647e76fe5c476bc7c4e79b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_minMapName</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>ad545703cf17bf7d62e4425c99e2ad6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_maxMapName</name>
      <anchorfile>classcasa_1_1PrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a2ee302d4f02529f5e2b172d9299db1d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::PrmWindow</name>
    <filename>classcasa_1_1PrmWindow.html</filename>
    <base>casa::Parameter</base>
    <member kind="function">
      <type></type>
      <name>PrmWindow</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a30f9746ee666e0a3ca442057de8b5e8c</anchor>
      <arglist>(mbapi::Model &amp;mdl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmWindow</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a00cd955e045dcef13d19abdc52386e5c</anchor>
      <arglist>(int xMin, int xMax, int yMin, int yMax)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrmWindow</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>ad6ff0ed82798368e473d76a9bdb2542b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a514907e2d50c539885eb7e72d66ea200</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VarParameter *</type>
      <name>parent</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a442461ab4f88fd3e88d2e1ef18a161c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a5150a88ed13ee8b90ff4797fd2ac4b86</anchor>
      <arglist>(const VarParameter *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AppPipelineLevel</type>
      <name>appSolverDependencyLevel</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a045352eb62f9ca68f7a06cefa6397c20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setInModel</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a16993f0e66a052cf8f30b9daaf72c727</anchor>
      <arglist>(mbapi::Model &amp;caldModel, size_t caseID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>validate</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>ae16201ff15157c68ba6eb838463882a1</anchor>
      <arglist>(mbapi::Model &amp;caldModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>ace016bb7cc782db5b170e7c209ea192b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>asInteger</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a0d7924535403ab471b0101ec2c316475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a22f3bd9920ca42232898faed1bf95449</anchor>
      <arglist>(const Parameter &amp;prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>abf294f69a56ca2fd4ad963afd2d77388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>aa1a3cde5bbc0a99e597ca7f4a493ce56</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>a256d6ee6b9db158529d7505af6f8827c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrmWindow</name>
      <anchorfile>classcasa_1_1PrmWindow.html</anchorfile>
      <anchor>aadf7b4af7f29ec831ff267801f11e823</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::RSProxy</name>
    <filename>classcasa_1_1RSProxy.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>RSKrigingType</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a78d06d241dffea8143d3284ff4d3e9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoKriging</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a78d06d241dffea8143d3284ff4d3e9b6af2fcb17fe21e0b3674ef46985074db26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LocalKriging</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a78d06d241dffea8143d3284ff4d3e9b6a4309dc4ff4f03b3bcdf03a26eef83d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GlobalKriging</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a78d06d241dffea8143d3284ff4d3e9b6a70b2cc285e416a3730ff88115faf5649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSProxy</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>ab7d115dd9a1878606d739084fd347b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>calculateRSProxy</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a34dec3689763f8df58e4ee8c04a52ae2</anchor>
      <arglist>(const std::vector&lt; const RunCase * &gt; &amp;caseSet)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>evaluateRSProxy</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>ad190cd337069156f41ab1e7a5073170e</anchor>
      <arglist>(RunCase &amp;cs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSKrigingType</type>
      <name>kriging</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>a78331dc95423dce9b768cfd89eab2995</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>polynomialOrder</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>af07b446f105ce811898edc6c7b37ac6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CoefficientsMapList &amp;</type>
      <name>getCoefficientsMapList</name>
      <anchorfile>classcasa_1_1RSProxy.html</anchorfile>
      <anchor>aefc5f422cf1d724d3bd295b5bd08d476</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::RSProxySet</name>
    <filename>classcasa_1_1RSProxySet.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSProxySet</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a366b9b37d6c93408684aae91461b04b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a6eaf134abe2e4a27b278a081335aff53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RSProxy *</type>
      <name>operator[]</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a1427da9e0f553ca82dd54d366ea4db36</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function">
      <type>const RSProxy *</type>
      <name>rsProxy</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a6c6966e1060f45429ce9226fea3a424d</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSProxy *</type>
      <name>rsProxy</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a95636acaf5e48d6146180b86976e0844</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>names</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a9ef42c8e859208dc60eb5f6c71474a84</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>classcasa_1_1RSProxySet.html</anchorfile>
      <anchor>a541cf93f175c6ad8a6587a33c848b5fa</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::RunCase</name>
    <filename>classcasa_1_1RunCase.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>CaseStatus</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ab208fcdf55a08ce05a2a22fac9199948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NotSubmitted</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ab208fcdf55a08ce05a2a22fac9199948a1ee34bf7c612acc1c62265ff640ccd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Scheduled</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ab208fcdf55a08ce05a2a22fac9199948a090ab404d1d0440b92c1525675cc43a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RunCase</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a59ae04344ea113ec2a7d1a58840aa46d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addParameter</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ad5e5973ea5306ef2059ae34173f4d6b1</anchor>
      <arglist>(SharedParameterPtr prm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>parametersNumber</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a8d084dc3caff2068e9cb232db2f96c0c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>parameter</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a5d941fef0d214697b0caee1393e3f7a5</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addObsValue</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a534e0b3ee3c10efe4ff9aa2eba08c229</anchor>
      <arglist>(ObsValue *obs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>observablesNumber</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a4a2c96581969a058d139fdab2e5b676f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ObsValue *</type>
      <name>obsValue</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ac288a62a712208f04d318e8c4cbef984</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mutateCaseTo</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a8cae13667d0118c2f362b269ee0f8be0</anchor>
      <arglist>(mbapi::Model &amp;baseCase, const char *newProjectName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>validateCase</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a6aed22544a54d990adc671f5c870a5ab</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CaseStatus</type>
      <name>runStatus</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>ac8b091f6c8af21498da93f2954b7e148</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRunStatus</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a4eeb8546960e2492ccd5ffba9b91b74e</anchor>
      <arglist>(CaseStatus st)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual mbapi::Model *</type>
      <name>caseModel</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a8d44b575d3e824edfc0a903d6a3ac748</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>projectPath</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a666859462b560dbe3b0cf913bc321c1e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>adb6fcba2b30f0402a012c5dba1e31041</anchor>
      <arglist>(const RunCase &amp;cs) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEqual</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a7d3aa0b9360a47ad9884093d493b100a</anchor>
      <arglist>(const RunCase &amp;cs, AppPipelineLevel upTo) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>id</name>
      <anchorfile>classcasa_1_1RunCase.html</anchorfile>
      <anchor>a03674213e4c65aea8e972f2daff77f88</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::RunCaseSet</name>
    <filename>classcasa_1_1RunCaseSet.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RunCaseSet</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a68988d62216f186ab52d9f3e19b6c55d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>ae478a53d6e47a7294cb97b9ed050b2e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; RunCase &gt;</type>
      <name>operator[]</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a538f39bafb8b3cf200f921fb681b90e7</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function">
      <type>RunCase *</type>
      <name>runCase</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>ac44a8a020c61165b17e94fd92d07022c</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterByExperimentName</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>afc2efc087efa2557ce9fed885a81c44b</anchor>
      <arglist>(const std::string &amp;expName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>filter</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a6977ffba7ee2db03e642b66185f7d843</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>experimentNames</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a903d6861fecc03ed25b872579830624b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a9594c648dd21c382631f6eb9a0f042dc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const RunCase * &gt;</type>
      <name>collectCompletedCases</name>
      <anchorfile>classcasa_1_1RunCaseSet.html</anchorfile>
      <anchor>a2380394a26f26b3a2092ce1acf68f402</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;doeList)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::RunManager</name>
    <filename>classcasa_1_1RunManager.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>ApplicationType</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fastcauldron</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca5a08b6111419372caeedc9bd871d50f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fastctc</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca3e70ec805d918d3c63dabaecd030dd25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fastgenex6</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca9b6242e2963156947168607351798672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fasttouch7</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4caa881c0ee99a00385debb7682e25ab7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fastmig</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca757f78d537d66509c8af437664672aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tracktraps</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4cae755ccaf202eda2eca4e7047c8437c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>track1d</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca5f87a0e1f36678fce036af2586562c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>datadriller</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca35e332df86abe2a708809cf8dd8cb43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>generic</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca1c9d2a3e6872653cdc3290e0a2651048</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>casa</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ac9252a97b9af971dfb11ec8929e61f4ca29f48da81da6d4d5e29b2a5424d5ed85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RunManager</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>a8d9b85728104957c1fe813f7afac93a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setCauldronVersion</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ae06b9e69ff6ba9f6b6939e849fd2445f</anchor>
      <arglist>(const char *verString)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>cauldronVersion</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>aa3d64e46ceb1c9fb04437f86622a04ba</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>addApplication</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>a93339258bbd05e0d2e7a2b79d19d0e1e</anchor>
      <arglist>(CauldronApp *app)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>scheduleCase</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ad8c5712d7d3cbd0577044fbbb6180c40</anchor>
      <arglist>(RunCase &amp;newRun, const std::string &amp;scenarioID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>runScheduledCases</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>ae77182d86239d031692a97707a585e61</anchor>
      <arglist>(int updateStateTimeInterval=-1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>stopAllSubmittedJobs</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>a4326b0c670f00250043d66d4315b2cc4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setMaxNumberOfPendingJobs</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>adab8a5b1322e44c8d96ca9e1452527af</anchor>
      <arglist>(size_t pendJobsNum)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setResourceRequirements</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>adddc4e1dbb9a33ca504318b8a674c86f</anchor>
      <arglist>(const std::string &amp;resReqStr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>setClusterName</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>a42fa7545dcae973d1f6e6c4664f58448</anchor>
      <arglist>(const char *clusterName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>clusterName</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>afe3d26ccefee5a89c153ae097adc5598</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CauldronApp *</type>
      <name>createApplication</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>aea777df275457656cb86abbd48fd8d08</anchor>
      <arglist>(ApplicationType appType, int cpus=1, size_t runTimeLimit=0, CauldronApp::ShellType sh=CauldronApp::bash, const std::string cmdLine=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>s_jobsIDListFileName</name>
      <anchorfile>classcasa_1_1RunManager.html</anchorfile>
      <anchor>a1775e9aa87f7e481aeb83198f921a28b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::ScenarioAnalysis</name>
    <filename>classcasa_1_1ScenarioAnalysis.html</filename>
    <member kind="function">
      <type></type>
      <name>ScenarioAnalysis</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a956361f716336777b0b298e9aa4aef0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScenarioAnalysis</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a7b1ed3e75f8ce53c4725c1374716e1fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>defineScenarioID</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ab3ddda3885ddac612e704b0428db9327</anchor>
      <arglist>(const char *scID)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>scenarioID</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a0bfd25faa1f7305997cb87a72cef5351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>defineBaseCase</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a4272efe6c642cc55dfc78f02e8a5c591</anchor>
      <arglist>(const mbapi::Model &amp;bcModel)</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>defineBaseCase</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ad35188960b061c7344c3eea3b2d55df6</anchor>
      <arglist>(const char *projectFileName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>baseCaseProjectFileName</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a859534316ab632896273a4d2d56360b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mbapi::Model &amp;</type>
      <name>baseCase</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a50ed1aea3c309b8aa0ba96cf86c9ff1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RunCase *</type>
      <name>baseCaseRunCase</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>af8f7a153457064c00deb3bf0ee902fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>setScenarioLocation</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a2535e18c71df12321a84e3d6188db559</anchor>
      <arglist>(const char *pathToCaseSet)</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>restoreScenarioLocation</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a5e594ccbc037acf0c2c38ca3293bb50b</anchor>
      <arglist>(const char *pathToCaseSet)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>scenarioLocation</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ac68b63e07e12aad2999d47f76be4963a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VarSpace &amp;</type>
      <name>varSpace</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a4554303ed86083f345b63903a766e12c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>setDoEAlgorithm</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>aff859b58873ad73d172a5730d09c84c3</anchor>
      <arglist>(DoEGenerator::DoEAlgorithm algo)</arglist>
    </member>
    <member kind="function">
      <type>DoEGenerator &amp;</type>
      <name>doeGenerator</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a7c627d513d05b874c80f3f63a1eaaf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RunCaseSet &amp;</type>
      <name>doeCaseSet</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a25a429c285cdc032377d85b19eedc033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>extractOneDProjects</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ac68408c36622afaaa70de375f9f11416</anchor>
      <arglist>(const std::string &amp;expLabel)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>importOneDResults</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ad3ffc1392c17529ec23caa22aeaab107</anchor>
      <arglist>(const std::string &amp;expLabel)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>setFilterOneDResults</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a888dcf4414359c501a8ef64941983cea</anchor>
      <arglist>(const std::string &amp;filterAlgorithm)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>generateThreeDFromOneD</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>af54c4ff9c8dc26cea8a70da4a7adb6f4</anchor>
      <arglist>(const std::string &amp;expLabel)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>applyMutations</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ad47373e4b23ffd605ff6f1d0388a198b</anchor>
      <arglist>(RunCaseSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>scenarioIteration</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a5b6a7420483e75b0bfbc99b56f620b62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>validateCaseSet</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a35a0d9da2ff0cc6b5aa95433c0f66efb</anchor>
      <arglist>(RunCaseSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>RunManager &amp;</type>
      <name>runManager</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a06ebc92f9e2d9f5b5045910fd72dd2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRunManager</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>afe787033425d246914cb8a9cac18e4a9</anchor>
      <arglist>(bool cleanApps=true)</arglist>
    </member>
    <member kind="function">
      <type>DataDigger &amp;</type>
      <name>dataDigger</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a5a7f00eac299816db5477e0cb9b0c48c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObsSpace &amp;</type>
      <name>obsSpace</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a2972817242e24174678daf8337030870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>addRSAlgorithm</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>aa6c1303815e8763b04d1c88b19289951</anchor>
      <arglist>(const char *name, int order, RSProxy::RSKrigingType krType, const std::vector&lt; std::string &gt; &amp;doeList, double targetR2=0.95)</arglist>
    </member>
    <member kind="function">
      <type>RSProxySet &amp;</type>
      <name>rsProxySet</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a771e01c9ea797f988b84f276da4cd9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SensitivityCalculator &amp;</type>
      <name>sensitivityCalculator</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a301995ccffe55a5fabbedec572f5f1a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RunCaseSet &amp;</type>
      <name>mcCaseSet</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a434f5bec9ec47f046ddf501d4a6e29cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>setMCAlgorithm</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a746158ee98d815bb614461dc948120b2</anchor>
      <arglist>(MonteCarloSolver::Algorithm algo, MonteCarloSolver::KrigingType interp=MonteCarloSolver::NoKriging, MonteCarloSolver::PriorDistribution priorDist=MonteCarloSolver::NoPrior, MonteCarloSolver::MeasurementDistribution measureDist=MonteCarloSolver::Normal)</arglist>
    </member>
    <member kind="function">
      <type>MonteCarloSolver &amp;</type>
      <name>mcSolver</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a3e8d20d87bb086ea07b517973f2bef12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>calibrateProjectUsingOptimizationAlgorithm</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a854b2f1aadec55b35febd3845d015749</anchor>
      <arglist>(const std::string &amp;cbProjectName, const std::string &amp;optimAlg, const std::string &amp;transformation, const double relativeReduction, bool keepHistory=false)</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>saveCalibratedCase</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a7464a9005c204147c70a391e8a07dfc6</anchor>
      <arglist>(const char *projFileName, size_t mcSampleNum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ab0fe78b1c8a095a19ee1ce16cdaf46ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnCode</type>
      <name>saveScenario</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>adc9f627f1eea5fdfed62b7a53b1cc574</anchor>
      <arglist>(const char *fileName, const char *fileType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScenarioAnalysis *</type>
      <name>loadScenario</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>a5921274906339864bb4213e04571a3df</anchor>
      <arglist>(const char *fileName, const char *fileType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScenarioAnalysis *</type>
      <name>loadScenario</name>
      <anchorfile>classcasa_1_1ScenarioAnalysis.html</anchorfile>
      <anchor>ae9530ce33a3a5f2a9a9682e619eb67e4</anchor>
      <arglist>(const char *stateFileBuf, size_t bufSize, const char *fileType=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::SensitivityCalculator</name>
    <filename>classcasa_1_1SensitivityCalculator.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SensitivityCalculator</name>
      <anchorfile>classcasa_1_1SensitivityCalculator.html</anchorfile>
      <anchor>add30b5e604c8933ea41fa41548af4fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>calculatePareto</name>
      <anchorfile>classcasa_1_1SensitivityCalculator.html</anchorfile>
      <anchor>a6cfcb615f112c56ba830083dd13d59cf</anchor>
      <arglist>(const RSProxy *proxy, ParetoSensitivityInfo &amp;sensInfo)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; TornadoSensitivityInfo &gt;</type>
      <name>calculateTornado</name>
      <anchorfile>classcasa_1_1SensitivityCalculator.html</anchorfile>
      <anchor>a73dea24ff9745ff8ce4fcb1e1c3806d1</anchor>
      <arglist>(RunCaseSet &amp;cs, const std::vector&lt; std::string &gt; &amp;expNames)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::SimpleBinDeserializer</name>
    <filename>classcasa_1_1SimpleBinDeserializer.html</filename>
    <base>casa::CasaDeserializer</base>
    <member kind="function">
      <type></type>
      <name>SimpleBinDeserializer</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a35ec6df4ade0fa6d94b16955d1ea8d50</anchor>
      <arglist>(std::istream &amp;fileHandle, unsigned int ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleBinDeserializer</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>ad35287ce820e56a0baf568b25c0a0c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkObjectDescription</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>adb59592d0cc248df92fd17c38aa0d23b</anchor>
      <arglist>(const char *objType, const std::string &amp;objName, unsigned int &amp;ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadObjectDescription</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>ab924527faec203d1acf30147d759a250</anchor>
      <arglist>(std::string &amp;objType, std::string &amp;objName, unsigned int &amp;ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>afd4e5ed4f47fcab23bd05f9275a0cba9</anchor>
      <arglist>(SUMlib::ISerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a83f27b43a75ace80e9f9cc0a22cec535</anchor>
      <arglist>(bool &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a6be8792fed28cfbe9523d10f9f6d4ef1</anchor>
      <arglist>(int &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a6c143ecdac73c49981a980644799ea41</anchor>
      <arglist>(unsigned int &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a3e4d0a059cea3063e7d6203ab2b16eec</anchor>
      <arglist>(long long &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a9ccf0f6d7dacdd292a413f77e2137875</anchor>
      <arglist>(unsigned long long &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>abd6116179e0e67d44d46a84e83214727</anchor>
      <arglist>(ObjRefID &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a509cb75010f6198a311de45b3ecf5835</anchor>
      <arglist>(float &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a9a1b4b41b48a3d660847ef84ac5c8e88</anchor>
      <arglist>(double &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>ab9bea9328a9edbd908bd07e74c5e8c51</anchor>
      <arglist>(std::string &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a2e031a983f248e8febc6962ec000c998</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>af426b44a3dc8007f939fd28f04892112</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a8dd0653f46a78772856c7877438e2f89</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>adad69956f940c8cf6f4cec1ff7e189a5</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>abf253b31bd0da9668e95ca97a86569af</anchor>
      <arglist>(std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a49415ac5d539cdc2907d5e218c0e490d</anchor>
      <arglist>(std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>ac3f21e71dc1a83f8ed1e23daa1c1006e</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a1cefad8b59310c00b4ca3ecf9ff74976</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a8056c3877c6d1e3df77bf64234a5f1c9</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>ad00f2f5ec3fab40693c243089a22fa45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkSignature</name>
      <anchorfile>classcasa_1_1SimpleBinDeserializer.html</anchorfile>
      <anchor>a9ca16d6603b60d70f71a390ef04011bc</anchor>
      <arglist>(std::istream &amp;ifs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::SimpleBinSerializer</name>
    <filename>classcasa_1_1SimpleBinSerializer.html</filename>
    <base>casa::CasaSerializer</base>
    <member kind="function">
      <type></type>
      <name>SimpleBinSerializer</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a16958038e7d725545b46c0e4394d2b47</anchor>
      <arglist>(const std::string &amp;fileName, int ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleBinSerializer</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>ab21f783d5e1bfb6db1aae2995091e980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a9824bee2b82efa7cdb67c53f5ce53e74</anchor>
      <arglist>(const CasaSerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a6a70e22431d8f642292c3f80e8c15509</anchor>
      <arglist>(const SUMlib::ISerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a2f40885a09ef1c515454664fb0341b13</anchor>
      <arglist>(bool val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a9bc3d455aabe939ddfb9b0714b778485</anchor>
      <arglist>(int val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>af4a0988782d17975f2ef527cca2a87b3</anchor>
      <arglist>(unsigned int val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a52f4ebdadd15f991fbf433ed43358bc1</anchor>
      <arglist>(long long val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a01b2d92e681c7e4870f8c482e5ea1aac</anchor>
      <arglist>(unsigned long long val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a84d7b7cdf658f8749c8c0d596083b06a</anchor>
      <arglist>(ObjRefID val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a4d40cc8959c8651f46082e44a7e57a77</anchor>
      <arglist>(float val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>afab1484b1a2ec9e81abcb5f2f2928a4f</anchor>
      <arglist>(double val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>aaed09cac63cd8ea408a2961ae7d78367</anchor>
      <arglist>(const std::string &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>aa7a3e8aafe5549b68c879fbf16a21442</anchor>
      <arglist>(const std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a65f4dba60680905b22db259c301256ca</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>ab49855e30613f4807c32464a8c037dc1</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a52da81719c213e439b47c69d1a81f1f2</anchor>
      <arglist>(const std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>addf37cdc60815a28da7dd034a19b88ac</anchor>
      <arglist>(const std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>aa555d448ad3ce69912d42960531bbf8a</anchor>
      <arglist>(const std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>ae10d1cbe2c61a4532f1ee91c03da5114</anchor>
      <arglist>(const std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>aa167fe3060996c17e06e09a0f6f5e6d7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a16f9ce7a54fac4909441d728aa7834a9</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1SimpleBinSerializer.html</anchorfile>
      <anchor>a3d9e5574472e1c6b4337e6245d9c8f88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::SimpleTxtDeserializer</name>
    <filename>classcasa_1_1SimpleTxtDeserializer.html</filename>
    <base>casa::CasaDeserializer</base>
    <member kind="function">
      <type></type>
      <name>SimpleTxtDeserializer</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a3c9d76ede6fff5888ba3cb572d47792e</anchor>
      <arglist>(std::istream &amp;fileHandle, unsigned int ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleTxtDeserializer</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a550f46e3d73448f45b3e23a98c2c32cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkObjectDescription</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a5f478bf78831b24602b6bffefcfe13f4</anchor>
      <arglist>(const char *objType, const std::string &amp;objName, unsigned int &amp;ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadObjectDescription</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a529d0f6dd0bf11b7041b1ccaba0044f3</anchor>
      <arglist>(std::string &amp;objType, std::string &amp;objName, unsigned int &amp;ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a30382d0c861213c3173ced1eb304ca3b</anchor>
      <arglist>(SUMlib::ISerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a5d2ce6a7ee8ec0155433ecd6449bfd7f</anchor>
      <arglist>(bool &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a78e3e0c468607f534af2f8ea4c941836</anchor>
      <arglist>(int &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>acd3aa3e464f7b9514e00ae37dc55a7d6</anchor>
      <arglist>(unsigned int &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>af0e53b04829aabd114de313962fc8481</anchor>
      <arglist>(long long &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>ad9500793ee386cff5c3a3563ee7e2263</anchor>
      <arglist>(unsigned long long &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a38187ebcb51467cbe691a3c8aacb625a</anchor>
      <arglist>(ObjRefID &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>aa4a8647bd0bda740541e6850f5a53738</anchor>
      <arglist>(float &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a9aeebb16a24f729ba8d9a9cb5d9099eb</anchor>
      <arglist>(double &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>aa70b131a7f98ad6094a2d70034af4062</anchor>
      <arglist>(std::string &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>afc23e0a396e15a901a88e105a4f42805</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a9dd72d1abe362ccc00679769a4e6e7eb</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a21a9fbead91b66d69e5057496f24d5c3</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>aca930e4633d26d567fb0fd80350079b8</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>abd98545d50b3f3c4043cd1e757b25fc4</anchor>
      <arglist>(std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>abe11f112e35af809b2820b73bac700b0</anchor>
      <arglist>(std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>aa772feb9de8ac5441e8cdf44ef86b2aa</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a7db8bf38cd6bc0242c085ab62ae9be8b</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a667b50b83fb1f7d5640740d3bdecdc89</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>a7a4fd6bc5dedc40b1efd2d0a6676fdc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkSignature</name>
      <anchorfile>classcasa_1_1SimpleTxtDeserializer.html</anchorfile>
      <anchor>ab221e2cc7feca7234992dc02fd398ede</anchor>
      <arglist>(std::istream &amp;ifs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::SimpleTxtSerializer</name>
    <filename>classcasa_1_1SimpleTxtSerializer.html</filename>
    <base>casa::CasaSerializer</base>
    <member kind="function">
      <type></type>
      <name>SimpleTxtSerializer</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>ad1a3d3acba31376e1bd119d9f638e1ce</anchor>
      <arglist>(const std::string &amp;fileName, int ver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleTxtSerializer</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a48f1d3be42569a74f251059dfa3fed77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a6cca68a38a02b741fc8a895a9d2c7c7e</anchor>
      <arglist>(const CasaSerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>abebdbc396bf2e20c853ed4acc9584b17</anchor>
      <arglist>(const SUMlib::ISerializable &amp;so, const std::string &amp;objName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a295f59ef9c70d539f92d44f956f3dea9</anchor>
      <arglist>(bool val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a4a3c053d44807257aca8c867eb8a7458</anchor>
      <arglist>(int val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a4492753510092e74faad0a8396783112</anchor>
      <arglist>(unsigned int val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a3b550be933dbda64b7e9014c35a6b1b7</anchor>
      <arglist>(long long val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a6bb0bc827c97097d57ac0e9d7edc8db8</anchor>
      <arglist>(unsigned long long val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>aacf867822f4f7074aeb1e50d5782601f</anchor>
      <arglist>(ObjRefID val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>ab16be0ca3f6e2469bc3f6228a15c5296</anchor>
      <arglist>(float val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>add1cbe03e50c11e4836d5fc76ab5f19a</anchor>
      <arglist>(double val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>ac04ef022a7ed04ef4b2122087e228c28</anchor>
      <arglist>(const std::string &amp;val, const std::string &amp;valName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a3b78131fe4cae510abb29857711ae43c</anchor>
      <arglist>(const std::vector&lt; bool &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>adabe9673d736d42cf9cd5e5c4cb80c9c</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a1573293ab85345f644908f052b557786</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a4759941d6b32fb19eebdbbe90ce45a5f</anchor>
      <arglist>(const std::vector&lt; long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>ac1183483f121639323d5362a596fa4e1</anchor>
      <arglist>(const std::vector&lt; unsigned long long &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a8acf6606a99180e318c9fecbdc3e5481</anchor>
      <arglist>(const std::vector&lt; ObjRefID &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a8eb61e6e82622bb1eb4c50ce9df44db5</anchor>
      <arglist>(const std::vector&lt; float &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a61121470beee720b003a0272840a095f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>ada4f5b3b58b9a5ee31c33ce19a66fdbc</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;vecName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1SimpleTxtSerializer.html</anchorfile>
      <anchor>a98730e7e045e1ce27e00fae9e5a39ee4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::TornadoSensitivityInfo</name>
    <filename>classcasa_1_1TornadoSensitivityInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>TornadoSensitivityInfo</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>ad4846b9823035dddfd907c9200eb2b7a</anchor>
      <arglist>(const Observable *obs, int obsSubID, double obsRefVal, const std::vector&lt; std::pair&lt; const VarParameter *, int &gt; &gt; &amp;varPrms, const SensitivityData &amp;sensData, const SensitivityData &amp;relSensData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TornadoSensitivityInfo</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>aee2aba5fced1d66b5249ef6e7779d1cd</anchor>
      <arglist>(const Observable *obs, int obsSubID, double obsRefVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSensitivity</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>aec7e2d302c056b6e53eccc31c6c02b71</anchor>
      <arglist>(double minV, double maxV, const VarParameter *prm, size_t prmSubID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMinMaxSensitivityInRange</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>aeaf8bdd696112b79109be2e073fe8934</anchor>
      <arglist>(double minVal, double maxVal, double minPrmVal, double maxPrmVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateAndAddValidRanges</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>af1b867f05d340aedfae9b9ad9658ac77</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;allPrmVals, const std::vector&lt; double &gt; &amp;allObsVals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateRelativeSensitivities</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a8174ee4dd9c32a13015ca7adffd01388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TornadoSensitivityInfo</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a9b61574b571af64661088288229be114</anchor>
      <arglist>(const TornadoSensitivityInfo &amp;tsi)</arglist>
    </member>
    <member kind="function">
      <type>TornadoSensitivityInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a38121734bc8ff422c12ce5bb6eb2f266</anchor>
      <arglist>(const TornadoSensitivityInfo &amp;tsi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>undefinedValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>aceccbc38bcb36e94dffb0268cc30d87b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minVarParameterRangeValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a68194eb4402c36db5891e9a20d7f9aec</anchor>
      <arglist>(size_t vPrmNum) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxVarParameterRangeValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a968a87bb3105537a05522b1f3f5d310a</anchor>
      <arglist>(size_t vPrmNum) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>validRngsPrmVals</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a61fb586039b831b10dd4f68b68795bb1</anchor>
      <arglist>(size_t prmID) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>validRngsObsVals</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a34f96f29f179f4e3359388570eca88f0</anchor>
      <arglist>(size_t prmID) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minAbsSensitivityValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a368855ce59eb17f51145155dfa6f68ed</anchor>
      <arglist>(size_t prmNum) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxAbsSensitivityValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a6349190eca4538a852033dce8e8da8ae</anchor>
      <arglist>(size_t prmNum) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRelSensitivityValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a20f66d2ab6c3dad770e34a7b2c8f4d1a</anchor>
      <arglist>(size_t prmNum) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRelSensitivityValue</name>
      <anchorfile>classcasa_1_1TornadoSensitivityInfo.html</anchorfile>
      <anchor>a2f12faac1f599843ced4dd83424945c0</anchor>
      <arglist>(size_t prmNum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarParameter</name>
    <filename>classcasa_1_1VarParameter.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a34c88f2a5ac21283dfed3689c693328b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Continuous</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a34c88f2a5ac21283dfed3689c693328ba717bc4ee2522af80c8a9c7250c171338</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Discrete</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a34c88f2a5ac21283dfed3689c693328ba4003c715d49f668213952711c152fb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Categorical</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a34c88f2a5ac21283dfed3689c693328bac0cb12f80cb366836b96450dba15e483</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarParameter</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a74f5fe6f9fbd05c589e3a2c1b947b772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>ac9a7fc056d63482fcceaab2ebb1e2839</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a4040adfff23ee77ef5fc92c3d08a73cf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>variationType</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>ae11b6b4529faea526ce163d09ee7a019</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SharedParameterPtr</type>
      <name>baseValue</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a4b05303a880785d524720d1e5b20d83d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SharedParameterPtr</type>
      <name>minValue</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>abfadfe1405033f89450f3043bd7e94b2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SharedParameterPtr</type>
      <name>maxValue</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>afcb98b6f64f07e33ed6b34f90055d0e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>ac450cf013968d9b7658271d6effc1134</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classcasa_1_1VarParameter.html</anchorfile>
      <anchor>a3a0d59456ab7f3471f41be4132d1c14a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmCategorical</name>
    <filename>classcasa_1_1VarPrmCategorical.html</filename>
    <base>casa::VarParameter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmCategorical</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>addd6e6c773b430218a7677bb3b7e71aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>variationType</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>a98d2fa088fa63bb085202288ecbcbc38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>baseValue</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>ab3a918ad90cac4b5184ffc87ba19bdd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>minValue</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>ade6b44803c9d94c8b3da0ae10c9a16c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>maxValue</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>a376d4281567630b1efd8c37de0a91375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>selected</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>aef94ad2c4ead614d72ab81a91f116617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>weights</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>acbc1b606a3b1cc938c9c9e6e7d46d67c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned int &gt;</type>
      <name>valuesAsUnsignedIntSortedSet</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>a3bda4b186e9b41e26583de3438a77277</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>createNewParameterFromUnsignedInt</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>acb2f45715ceaeac7811efa83fa91fe58</anchor>
      <arglist>(unsigned int val) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>a9295b3fb4f5f8953ca730c133424abd4</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VarPrmCategorical *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>af53d8d1e1a0976847174891812c02ca7</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>aaa5d93a7e6de7bccbf98be208eee8287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmCategorical.html</anchorfile>
      <anchor>a6a89a355b0c8d73e9e38755fc453719a</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmCompactionCoefficient</name>
    <filename>classcasa_1_1VarPrmCompactionCoefficient.html</filename>
    <base>casa::VarPrmLithologyProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1VarPrmCompactionCoefficient.html</anchorfile>
      <anchor>a10b9b05dd4ca54cbc96547e6ff4a74e3</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;lithosName, double baseCompCoef, double minCompCoef, double maxCompCoef, VarPrmContinuous::PDF prmPDF, const std::string &amp;name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmCompactionCoefficient.html</anchorfile>
      <anchor>ac79bd0afbf80a567ca8d2c38cd919a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmCompactionCoefficient.html</anchorfile>
      <anchor>a50175183a4425a08946c17dc969562f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmCompactionCoefficient.html</anchorfile>
      <anchor>a005a94a895fcc6ee9bb1247122bf16bc</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmCompactionCoefficient</name>
      <anchorfile>classcasa_1_1VarPrmCompactionCoefficient.html</anchorfile>
      <anchor>ac47eb959dbdbc202ead08665267d2ae0</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>ab9f03a98262533a2edc911aa2884dc35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a639c7fdd27da62277c7e3c05ddfb98cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a3fbabf46ae1a4e353803c1490825bf1f</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a1364aa53be58beda9b7dc1b95f6ff5e6</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a21837123bf693ef1a865dec48b335bea</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a036c8b28e3b0e053f76f9dd926641676</anchor>
      <arglist>(const SharedParameterPtr prm) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>lithoNames</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a5fa8dee23b425241916988c43b5de933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>serializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>aa1df58614cdb1628ae481f4cd54c1f5d</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>adce7cf1e4399d787b1eb793852f0a7ed</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmContinuous</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aba4039fb2f84783588b42cb9b35dac68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>variationType</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a8e9ca4bbb0773fc2bedb42129052177d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>minValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a0c0dec75a537693d6ba8c8c6497cb544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>maxValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>abb305012cfc0cd4cca69c7091402d5be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>baseValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a3448da3d529b36ff3ed6c6c090187ca8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PDF</type>
      <name>pdfType</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a0a118201a989bec1dceba6b90e5507d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>stdDevs</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a5feac243d04e785a2cef660c5ae81c97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aeee58c388f561448e39444ea858256cd</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vals, int &amp;off) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>selected</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a3f0a92319b8783de3e6c749820cfeee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PDF</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aae6536fb7ff2d99c1a4ab71c0a73f6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Block</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aae6536fb7ff2d99c1a4ab71c0a73f6e8a8d4eb6d4d1e2b85ee7dbbe42bc0b3da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Triangle</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aae6536fb7ff2d99c1a4ab71c0a73f6e8ae7c9212177d3c67086b41ea1ca6a441d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Normal</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aae6536fb7ff2d99c1a4ab71c0a73f6e8a6269fe05157836585509745766f7ecf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VarPrmContinuous *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a9b643a3d22df8133112c801142ad56d3</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VarPrmLithologyProp</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>acf3312f59e33f555f25588ff2f05aeb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VarPrmLithologyProp</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>abe58979238739ee5fc814a213f43ce0a</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;lithosName, VarPrmContinuous::PDF prmPDF, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>ad0b05fa421c85768f5a5ef8d30666510</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a48b43130a5176ff452edbe1ac8574f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_lithosName</name>
      <anchorfile>classcasa_1_1VarPrmLithologyProp.html</anchorfile>
      <anchor>a589c6702cd8fe328d47965ff95c4e69a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedParameterPtr</type>
      <name>m_baseValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>afbde45b910bc6cbbf338399cb60a8270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedParameterPtr</type>
      <name>m_minValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a5041203bc68b19d1a207b0b9270c0027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedParameterPtr</type>
      <name>m_maxValue</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>ab1e75a82d6e9deac9bf45e5ac918b4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF</type>
      <name>m_pdf</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a34acd00aa9ce2caf10652a32f4c2ded1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmContinuous</name>
    <filename>classcasa_1_1VarPrmContinuous.html</filename>
    <base>casa::VarParameter</base>
    <member kind="function" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>ad74557edd20724976b1559d4a186fa90</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>aeb98b8cc0430727b37c01fe7b884e237</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a8180384cba841d4d1dd451d04ea25b72</anchor>
      <arglist>(const SharedParameterPtr prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>a73613a101a8498fdf3581580fa59dee6</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmContinuous.html</anchorfile>
      <anchor>af57f626ae797097ae5a09ca6782a29d7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmCrustThinning</name>
    <filename>classcasa_1_1VarPrmCrustThinning.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmCrustThinning</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a94faca8858484accf2d0b099ae29f4f9</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;basePrmValues, const std::vector&lt; double &gt; &amp;minPrmValues, const std::vector&lt; double &gt; &amp;maxPrmValues, const std::vector&lt; std::string &gt; &amp;mapsList, PDF prmPDF, const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>ae14868f22ae1ae658f7fd25bb0a11e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a5f112be337e157708ff8dfaff97c2ea1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a4b10af9ff1c0e59723a34ceada06e952</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a7e7521c31348896bb23ba8eb4f155ec9</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>ae61b48451de11da27393c8d94dd32417</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a3a666562134f5fdbe42aca5154b2d81b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a11d960b02a3c158a72b45df62873cf18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a53f8e9e21ebaa74de719fe0437f725a3</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmCrustThinning</name>
      <anchorfile>classcasa_1_1VarPrmCrustThinning.html</anchorfile>
      <anchor>a6270fb2e34a22ecb3e56ece78e3cfe31</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmDiscrete</name>
    <filename>classcasa_1_1VarPrmDiscrete.html</filename>
    <base>casa::VarParameter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmDiscrete</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a0aae37d0d9511972402ab7e106f0b5f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>variationType</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a206f25d10c57fab12c98957832666aa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>minValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>ad3337f795be636cfa6630c92c5351b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>maxValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>aea94dbd8b50ad6495c1620ffa145b05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SharedParameterPtr</type>
      <name>baseValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>ae4ae1870ad3537c16add5b9dad9b99a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SharedParameterPtr &gt;</type>
      <name>valuesSet</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a96bdcf634908a3586f0e3b5c8ff9d9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>weights</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>ab25f31c8e5f6c9ace06c845c2f97a8a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a532bada46278d35b9dea387b2571e5a7</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a86ac7260691325dc03c640118ebe0ab3</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vals, int &amp;off) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VarPrmDiscrete *</type>
      <name>load</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>aa4cb00d90dc959559fbfcc30d38f0741</anchor>
      <arglist>(CasaDeserializer &amp;dz, const char *objName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_baseValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a890e3ebdd5d6f5d3eeff1bfc145f6b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_minValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>ae26b52ce032207d3e2bb613e02247d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_maxValue</name>
      <anchorfile>classcasa_1_1VarPrmDiscrete.html</anchorfile>
      <anchor>a57b6798badae45eec6e9c7630a0fbcb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmLithoFraction</name>
    <filename>classcasa_1_1VarPrmLithoFraction.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmLithoFraction</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a3ce6e761f6619d1b291b89d9bd386634</anchor>
      <arglist>(const std::string &amp;layerName, const std::vector&lt; int &gt; &amp;lithoFractionsInds, const std::vector&lt; double &gt; &amp;baseLithoFrac, const std::vector&lt; double &gt; &amp;minLithoFrac, const std::vector&lt; double &gt; &amp;maxLithoFrac, casa::VarPrmContinuous::PDF pdfType, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmLithoFraction</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a3b5b30dd1fbe9ab6a1571103c1119f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a43bca88fd5da62a514d7ba0f2f7be50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a977459a66331c389d2204a64b8515947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a8d11736b66c0bb84909671ae6d79f94b</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>adb0ce39224edc6fda2c82e5d23934dd1</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a0e612adf11c6130b913562632a340370</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a9c2dc2687064ea3197b65d2ceebcc633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>aacdf44a2f7d6fdd29609ad39d9833b54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a42272f0e20903ef5638e9aa10ad3b5b9</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmLithoFraction</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a51350d985a027051f4d662c319b757ba</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a200d0522f58e17b214c643b8e894b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_lithoFractionsInds</name>
      <anchorfile>classcasa_1_1VarPrmLithoFraction.html</anchorfile>
      <anchor>a1e532c7455fa103f6eb2e8124edb1111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmLithologyProp</name>
    <filename>classcasa_1_1VarPrmLithologyProp.html</filename>
    <base>casa::VarPrmContinuous</base>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmLithoSTPThermalCond</name>
    <filename>classcasa_1_1VarPrmLithoSTPThermalCond.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>aa4df81507a469f18dfb2264893da8f51</anchor>
      <arglist>(const char *lithoName, double baseValue, double minValue, double maxValue, PDF pdfType=Block, const char *name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a198bfe7ac0141f15f03b87957479fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a4a2423f2193fda96ff325ab617bc1b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a2d5b751075530df66a303c81854f81cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a5ca4279c8bedc30888be60c14aa03787</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a02c2fead72f2943226523f5af9837d2f</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ac31dd41e25c5e8d7988deb682bd54001</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>abb3faeda343a560e799b5029d3fcc757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ade48f5596fc3d961fb5bb7a335f46959</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ab481673704b181bab5d5a4781a109f14</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmLithoSTPThermalCond</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>ab3f4f7b139162119c75e0ede38cb3a3e</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1VarPrmLithoSTPThermalCond.html</anchorfile>
      <anchor>a1919fe8db0fcfda2f744f0db390d6b5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmOneCrustThinningEvent</name>
    <filename>classcasa_1_1VarPrmOneCrustThinningEvent.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>acf2fd732b55e4e1e1487c9072e74edc2</anchor>
      <arglist>(double baseThickIni, double minThickIni, double maxThickIni, double baseT0, double minT0, double maxT0, double baseDeltaT, double minDeltaT, double maxDeltaT, double baseThinningFct, double minThinningFct, double maxThinningFct, PDF prmPDF, const char *name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>aa9e7fc04612291adc4496c16e3174473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a6ab36cc06cfcff9da7813ed8b6ba0dca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>ad3fec67fc91b4ef6a3b563bc6dd18627</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a37af0c22e029f39da7cde5afc67e9213</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a60fed13e26652d6f276742d36200541e</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a078fd425e9b8aef4d4d0f5686e1230a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a2b2bbfc8fb19b799b652635857cfa64a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a5ebcc01b62b37e5b8e548b0add29fdc5</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmOneCrustThinningEvent</name>
      <anchorfile>classcasa_1_1VarPrmOneCrustThinningEvent.html</anchorfile>
      <anchor>a3ba72e36e18e43c563a89ef69e96154e</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmPermeabilityModel</name>
    <filename>classcasa_1_1VarPrmPermeabilityModel.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ad9aefa4f18cc3517abc418b1ed53ee43</anchor>
      <arglist>(const char *lithoName, PrmPermeabilityModel::PermeabilityModelType mdlType, const std::vector&lt; double &gt; &amp;baseModelPrms, const std::vector&lt; double &gt; &amp;minModelPrms, const std::vector&lt; double &gt; &amp;maxModelPrms, PDF prmPDF, const char *name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a6e4a4ac7c674688bdf4e8867fbfcdabd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>aa7a93864fd1fa17cb87e4fbaaecc6779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a1472bf69d3d5e5dc583b8bd1f220a1b2</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a4a387f36d470927d7bcc24aa843cfa46</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ae294347d4f816345e5e83a81ef0d5d7b</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ab437307d724e06db095b2bba2fc362d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ae4b702e868157af849d40c1b1049ce12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a3041855ce682a607a6dc4f0a92a57e70</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmPermeabilityModel</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a8c12be1005e02a2cf45328b24593e02e</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>createBaseCaseMPModelPrms</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>a37b032dd3985a6044fa7af28dfbd8ed0</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;minModelPrms, const std::vector&lt; double &gt; &amp;maxModelPrms)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PrmPermeabilityModel::PermeabilityModelType</type>
      <name>m_mdlType</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ad90e2186a98723a1301893221448556a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1VarPrmPermeabilityModel.html</anchorfile>
      <anchor>ad81e144b4b8b7a2d849e2857be239b1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmPorosityModel</name>
    <filename>classcasa_1_1VarPrmPorosityModel.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmPorosityModel</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a8f479cfc5617a62bd9015201a0ded0df</anchor>
      <arglist>(const char *lithoName, PrmPorosityModel::PorosityModelType mdlType, double baseSurfPor, double minSurfPor, double maxSurfPor, double baseMinPor, double minMinPor, double maxMinPor, double baseCompCoeff, double minCompCoeff, double maxCompCoeff, double baseCompCoeffB, double minCompCoeffB, double maxCompCoeffB, PDF prmPDF, const char *name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>aaa55ec96340b523823770e712f493500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a6d4c397aead39676f372f5efd21e2ca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>af198c2f3d91a77afd2f3316a04b83fa6</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a70dc0c73fd2d4fdf593e0f8117cb4ceb</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a2a67aab32e46f83c5c33c5004307d28b</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a5300e7d96f180143ea787ca53aa42755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>ab851aaa2f18a7e3d509a1ee1e638497e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a1ada726d8cada8ba347a2447337cdd27</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmPorosityModel</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>aea080677122de24c7072b32a3c88295e</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PrmPorosityModel::PorosityModelType</type>
      <name>m_mdlType</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>aaad6b51ef954a1f99cabed4389bf79eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lithoName</name>
      <anchorfile>classcasa_1_1VarPrmPorosityModel.html</anchorfile>
      <anchor>a7186755c1c68ef7b841360dbfb1593b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockHC</name>
    <filename>classcasa_1_1VarPrmSourceRockHC.html</filename>
    <base>casa::VarPrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockHC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>a26d0786bf919327d4e736da75935db60</anchor>
      <arglist>(const char *layerName, double baseValue, double minValue, double maxValue, VarPrmContinuous::PDF pdfType=Block, const char *name=0, const char *srTypeName=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockHC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>ab873d177bfc27caba4b7d9889cd1e6c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>a1553ba85b06a78866d5ae69d00d4b8c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>ab87751a70f3349d1469dc30ad56f2dcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>ada913e57d3be5dedd12fa6f9903cc0c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>a1701032c3077b1a87641e64921a0a6a6</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockHC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>af3b1079907121c9b7099d6c8b6e6aa66</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockProp</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a055a86338c49c5378c8f1321df5edd6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>ae0ec44b538aac1e7b62b621a6f44516f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a56267c135acc575f8fbd215ee03920ac</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a7bb76c0fce6c19954204fe8f7e19084b</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a5405198bfbd35413f721619fc3fb3f66</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>asDoubleArray</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>ab6777fa3bf9e0a2c2d56b2fa8cd049cc</anchor>
      <arglist>(const SharedParameterPtr prm) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>serializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a76ad20d959de96da09fdb4d5f3d4b862</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserializeCommonPart</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a8fb651589ef7515f6b8a553b1bd720ac</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>layerName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a29ed98411b6372c4983673401db5c9bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mixID</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>ab9eaababc80d076b128b8a945c905629</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSourceRockTypeRange</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a9773a7e1d12a9808094dca21655def30</anchor>
      <arglist>(const char *srTypeName, SharedParameterPtr baseVal, SharedParameterPtr minVal, SharedParameterPtr maxVal, PDF pdfType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>createNewPrm</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHC.html</anchorfile>
      <anchor>a4653caf38a925259edd4056224dffa91</anchor>
      <arglist>(double val, const std::string &amp;srType) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VarPrmSourceRockProp</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a2f77ea74bbbb902d9609a6c7295b18f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VarPrmSourceRockProp</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a455c6bd0948dfb75e1d7bc05080df129</anchor>
      <arglist>(const char *layerName, PDF pdfType, const char *name, const char *srTypeName, int mixID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a600bd490c1a119a8acf7ae0eaf6fc696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_propName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a1748e9275d117b40cb3ed7b79321b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_layerName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a1450cdd13815a629bf0d15e2cd09d65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_mixID</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a99340d12b9f2737a81e5b9d09e5d1d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_srTypeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a97d8813f50c1ebfdbe371e6eebca4561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::vector&lt; SharedParameterPtr &gt; &gt;</type>
      <name>m_name2range</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a52c6071f99b2957158ae485252398760</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockHI</name>
    <filename>classcasa_1_1VarPrmSourceRockHI.html</filename>
    <base>casa::VarPrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockHI</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>ac2c447c0aa17c6eacc48f26e34ba24d7</anchor>
      <arglist>(const char *layerName, double baseValue, double minValue, double maxValue, VarPrmContinuous::PDF pdfType=Block, const char *name=0, const char *srTypeName=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockHI</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>aeddb223a565bde96f8da2df25ed2cdea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>a6cd97b2ad0cd680887045e7ed345f703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>acbde6c244c08fe16d1201bd71ffbdad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>ac17e3dade879f933e9182b1bf6cb41ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>a41ce51ed38a32278eb99fb3be4ed60c6</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockHI</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>a0db6765b1db19bd3efc1fbba10aa2bc5</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>createNewPrm</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockHI.html</anchorfile>
      <anchor>a780d9a1c5667bea27a8301c892ef532e</anchor>
      <arglist>(double val, const std::string &amp;srType) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockPreAsphaltStartAct</name>
    <filename>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</filename>
    <base>casa::VarPrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a5413955c11a101056ce5d064672f05ef</anchor>
      <arglist>(const char *layerName, double baseValue, double minValue, double maxValue, VarPrmContinuous::PDF pdfType=Block, const char *name=0, const char *srTypeName=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a701a3b21250b639bd08fdd947542fa1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>abfec49e7c7e9342c14af43dd53bf27aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a9657e1e526d91820dd57fb8cf1c76d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>ab22af6483da4be3b5ee570f20f07bdbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a00be9ce481801c92112733532a85b1a5</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockPreAsphaltStartAct</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>a2f7a50a79ba88e416524c8a8a38bbb18</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>createNewPrm</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockPreAsphaltStartAct.html</anchorfile>
      <anchor>aba3bbde92088d43a89d41302931c4b0f</anchor>
      <arglist>(double val, const std::string &amp;srType) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockProp</name>
    <filename>classcasa_1_1VarPrmSourceRockProp.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual SharedParameterPtr</type>
      <name>createNewPrm</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockProp.html</anchorfile>
      <anchor>a1a7a47405c11115f06cb4143291d846c</anchor>
      <arglist>(double val, const std::string &amp;srType) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockTOC</name>
    <filename>classcasa_1_1VarPrmSourceRockTOC.html</filename>
    <base>casa::VarPrmSourceRockProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a5c06c87c5f99511d7fb72fd7af86b247</anchor>
      <arglist>(const char *layerName, const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, VarPrmContinuous::PDF pdfType=Block, const char *name=0, const char *srTypeName=0, int mixID=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a0e557bee85ea334739826395fb33eaf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a13d28ebbf4b03f241b565204d45c74e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a2b692719e514296e104092d2511df436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>ac060cdbc1045a4352b202e7db05e5340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a50a70f176821e430c29d699de7c7857d</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockTOC</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>a0d8fc5bf9a3b6241592a01714fbd22f3</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>createNewPrm</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockTOC.html</anchorfile>
      <anchor>adb7c407230e4bf86d2f17506bf4bf638</anchor>
      <arglist>(double val, const std::string &amp;srType) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSourceRockType</name>
    <filename>classcasa_1_1VarPrmSourceRockType.html</filename>
    <base>casa::VarPrmCategorical</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockType</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>ad534101c667a54b5bf3c4329caad15cb</anchor>
      <arglist>(const char *layerName, const std::string &amp;baseVal, int mixID, const std::vector&lt; std::string &gt; &amp;variation, const std::vector&lt; double &gt; &amp;weights, const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmSourceRockType</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a818402f34d0e6fc0bf411c89a69b7fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a6d360aef4281a2c7c76a323d744ec44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a702506aac78433f4f305fa59477b27c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a10585a3caed6aa2786e2bbe3a676a03f</anchor>
      <arglist>(const PrmSourceRockType *prm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mixID</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a8cd1e4be2a3e02f550c5f2062df19911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>layerName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>aa69e2f3e226fdc9e6d049d59f46d6fc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a20691c84619efb7b4830ae376c7299dc</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>aa71188c8d78b8d1a5f095e69223decd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a4067df1f658151b7e02225d1d0d72eb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>acfe67f3e6ec472ed95e61bdab08cab16</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSourceRockType</name>
      <anchorfile>classcasa_1_1VarPrmSourceRockType.html</anchorfile>
      <anchor>a2d8c56d2dd64ac2fd3c5df7078a5861b</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmSurfacePorosity</name>
    <filename>classcasa_1_1VarPrmSurfacePorosity.html</filename>
    <base>casa::VarPrmLithologyProp</base>
    <member kind="function">
      <type></type>
      <name>VarPrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1VarPrmSurfacePorosity.html</anchorfile>
      <anchor>aee7b03f7a7978588416cc6337d9755da</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;lithosName, double baseSurfPor, double minSurfPor, double maxSurfPor, VarPrmContinuous::PDF prmPDF, const std::string &amp;name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmSurfacePorosity.html</anchorfile>
      <anchor>a74e219a452612cc408be44e3d9e67702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmSurfacePorosity.html</anchorfile>
      <anchor>a9b282aa85b14da44364e3a8880ddbc16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmSurfacePorosity.html</anchorfile>
      <anchor>a185fd39c3470d821427b53007e39acb1</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmSurfacePorosity</name>
      <anchorfile>classcasa_1_1VarPrmSurfacePorosity.html</anchorfile>
      <anchor>a549f14800f3937515cfdc77d4fdf752d</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarPrmTopCrustHeatProduction</name>
    <filename>classcasa_1_1VarPrmTopCrustHeatProduction.html</filename>
    <base>casa::VarPrmContinuous</base>
    <member kind="function">
      <type></type>
      <name>VarPrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a7316bf9c78f8a5ec0e6f8c0c1ec027d3</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, PDF pdfType=Block, const char *name=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VarPrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>af38361272f0baee74ebfeed759afb688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>name</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a3be8c5d1bb24efa8c0d1b36017db00e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a1b728e16a1b954dcf45d034025f05ab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromDoubles</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a876518430ed3cb26474ae482c2a58061</anchor>
      <arglist>(std::vector&lt; double &gt;::const_iterator &amp;vals) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>newParameterFromModel</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a49d587b30ff818d4ff0ab253b7ecf922</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;vin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SharedParameterPtr</type>
      <name>makeThreeDFromOneD</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>aff9714994319cb3b24732f9cc31bfaa8</anchor>
      <arglist>(mbapi::Model &amp;mdl, const std::vector&lt; double &gt; &amp;xin, const std::vector&lt; double &gt; &amp;yin, const std::vector&lt; SharedParameterPtr &gt; &amp;prmVec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a0bc693a573d4f754f6832b9491eb8a2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>afa4c4526523bd7f5adad78f85e1aa98d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a953de6ade118b0649e448b7afcfc97a8</anchor>
      <arglist>(CasaSerializer &amp;sz, unsigned int version) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarPrmTopCrustHeatProduction</name>
      <anchorfile>classcasa_1_1VarPrmTopCrustHeatProduction.html</anchorfile>
      <anchor>a2b3d30c8865bbe5de6b3428bca21acff</anchor>
      <arglist>(CasaDeserializer &amp;dz, unsigned int objVer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>casa::VarSpace</name>
    <filename>classcasa_1_1VarSpace.html</filename>
    <base>casa::CasaSerializable</base>
    <member kind="function" virtualness="pure">
      <type>virtual ErrorHandler::ReturnCode</type>
      <name>addParameter</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>ae6eb3eca60d530933ed6b6ea414f6edd</anchor>
      <arglist>(VarParameter *prm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a15ac7ddafe041d13714904cc9207e497</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dimension</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a3787d89f562e40c7633a94c4b3d61b02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfContPrms</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a135f3bbf75b179aecb8c39a5881cdc9c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfDiscrPrms</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>aa5f87a856637a472fec4766bef4b741f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfCategPrms</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a5e9bbd4903b3005175aedb94102f969c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VarParameter *</type>
      <name>parameter</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a99cf7c8702c6486ba0dcf6549b9e16c0</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VarPrmContinuous *</type>
      <name>continuousParameter</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a30d4b131b84fc65bfd50c2e923ffaa22</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VarPrmDiscrete *</type>
      <name>discreteParameter</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a93b0ec881d6cb462952a53ef9c51efef</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VarPrmCategorical *</type>
      <name>categoricalParameter</name>
      <anchorfile>classcasa_1_1VarSpace.html</anchorfile>
      <anchor>a6a0a48cd414e4dc3b799a3870f524c0c</anchor>
      <arglist>(size_t i) const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>casa::BusinessLogicRulesSet</name>
    <filename>namespacecasa_1_1BusinessLogicRulesSet.html</filename>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLayerThickness</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>ab67ef10405fc44995191d1853f3c658e</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryTopCrustHeatProduction</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a6a3c1ae9628133d4f74a81ab31a5409f</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockTOC</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a1eef69b4de3cf42d78b016ebf0598934</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, const std::vector&lt; double &gt; &amp;dblRng, const std::vector&lt; std::string &gt; &amp;mapRng, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockHI</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a777857b38f317ce0d771d4dde3a2fc70</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockHC</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a773accb6839b2fd6d537ed7faa34b7a9</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockPreAsphaltActEnergy</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a83195bf673f8830debda89535b149279</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const char *srTypeName, double minVal, double maxVal, VarPrmContinuous::PDF rangeShape)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySourceRockType</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a397878208e677360976b16a13ea8f62c</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, int mixID, const std::vector&lt; std::string &gt; &amp;stVariation, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryOneCrustThinningEvent</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>ae78fca38b49eca8a39260c1051dbf1d1</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, double minThickIni, double maxThickIni, double minT0, double maxT0, double minDeltaT, double maxDeltaT, double minThinningFct, double maxThinningFct, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryCrustThinning</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>afdc3c6c6e26befb8c318ffc0cd7e3497</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, double minThickIni, double maxThickIni, const std::vector&lt; double &gt; &amp;minT0, const std::vector&lt; double &gt; &amp;maxT0, const std::vector&lt; double &gt; &amp;minDeltaT, const std::vector&lt; double &gt; &amp;maxDeltaT, const std::vector&lt; double &gt; &amp;minThinningFct, const std::vector&lt; double &gt; &amp;maxThinningFct, const std::vector&lt; std::string &gt; &amp;mapsList, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryPorosityModelParameters</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a049ea60d1ef5e40e351ffec49d369631</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *litName, const char *modelName, double minSurfPor, double maxSurfPor, double minCompCoef, double maxCompCoef, double minMinPor, double maxMinPor, double minCompCoef1, double maxCompCoef1, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VarySurfacePorosity</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a110a814dad783c31fcca9aa785979abc</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::vector&lt; std::pair&lt; std::string, size_t &gt; &gt; &amp;layersName, const std::vector&lt; std::string &gt; &amp;alochtLitName, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;faultsName, const std::string &amp;litName, double minSurfPor, double maxSurfPor, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryCompactionCoefficient</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a07b2530c62ff077d2ecec4a5a8ae4433</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::vector&lt; std::pair&lt; std::string, size_t &gt; &gt; &amp;layersName, const std::vector&lt; std::string &gt; &amp;alochtLitName, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;faultsName, const std::string &amp;litName, double minCompCoef, double maxCompCoef, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLithoFraction</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>af7d62f54fa68b6e035c4c45279fba253</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const std::string &amp;name, const std::string &amp;layerName, std::vector&lt; int &gt; lithoFractionsInds, std::vector&lt; double &gt; minLithoFrac, std::vector&lt; double &gt; maxLithoFrac, casa::VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryPermeabilityModelParameters</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a873b08f4632795c4030767f5f7bae714</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *lithoName, const char *modelName, std::vector&lt; double &gt; &amp;minModelPrms, std::vector&lt; double &gt; &amp;maxModelPrms, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
    <member kind="function">
      <type>ErrorHandler::ReturnCode</type>
      <name>VaryLithoSTPThermalCondCoeffParameter</name>
      <anchorfile>namespacecasa_1_1BusinessLogicRulesSet.html</anchorfile>
      <anchor>a3e0af4981838a50b99809b4eaaf14a54</anchor>
      <arglist>(ScenarioAnalysis &amp;sa, const char *name, const char *layerName, const char *litName, double minVal, double maxVal, VarPrmContinuous::PDF pdfType)</arglist>
    </member>
  </compound>
</tagfile>
