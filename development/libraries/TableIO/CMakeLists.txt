#########################################################################
#                                                                       #
# Copyright (C) 2012-2013 Shell International Exploration & Production. #
# All rights reserved.                                                  #
#                                                                       #
# Developed under license for Shell by PDS BV.                          #
#                                                                       #
# Confidential and proprietary source code of Shell.                    #
# Do not distribute without written permission from Shell.              #
#                                                                       #
#########################################################################

# Building the TableIO library
#
# ATTENTION: The file is used by Basin Modeling and Geocase.
#
include_directories(src)

if (GIT_FOUND AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../../../.git )
   # Exctract Spec file version information
   # the commit's SHA1, and whether the building workspace was dirty or not
   execute_process(COMMAND 
      "${GIT_EXECUTABLE}"  log --format="%H" -1 BasinModellerProperty.Spec
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      OUTPUT_VARIABLE SPEC_FILE_GIT_SHA1
      ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

   # the date of the commit
   execute_process(COMMAND
      "${GIT_EXECUTABLE}" log -1 --format=%ad --date=local BasinModellerProperty.Spec
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      OUTPUT_VARIABLE SPEC_FILE_GIT_DATE
      ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

   # the subject of the commit
   execute_process(COMMAND
      "${GIT_EXECUTABLE}" log -1 --format=%s BasinModellerProperty.Spec
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      OUTPUT_VARIABLE SPEC_FILE_GIT_COMMIT_SUBJECT
      ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
else()
   set(SPEC_FILE_GIT_SHA1 "\"0000000000000000000000000000000000000000\"")
   set(SPEC_FILE_GIT_DATE "Mon Jan 01 00:00:00 1900")
   set(SPEC_FILE_GIT_COMMIT_SUBJECT "Not found")
endif()


# generate include file with Spec file version
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/SpecFileVersion.h.in" "${CMAKE_CURRENT_BINARY_DIR}/SpecFileVersion.h" @ONLY)

set (generator_source_files
  ${CMAKE_CURRENT_BINARY_DIR}/cauldronschema.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/cauldronschemafuncs.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/cauldronschema.h
  ${CMAKE_CURRENT_BINARY_DIR}/cauldronschemafuncs.h
)

set( LIB_NAME "TableIO" )
add_library( ${LIB_NAME}
   src/dataschema.cpp
   src/database.cpp
   src/datautils.cpp
   src/ProjectFileHandler.h
   src/ProjectFileHandler.cpp
   src/upgradeTables.cpp
   ${generator_source_files}
)
set_target_properties( ${LIB_NAME} PROPERTIES FOLDER "${BASE_FOLDER}/${LIB_NAME}" )

# under Linux we are building Boost that is why this target exist
if (UNIX)
add_dependencies(${LIB_NAME} Boost)
endif (UNIX)

include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_dependencies( ${LIB_NAME}
   FileSystem
   utilities
)

bm_include_libraries( ${LIB_NAME}
   FileSystem
   utilities
)

target_link_libraries( ${LIB_NAME}
   FileSystem
   utilities
)


# cauldronschema and cauldronschemafuncs have to be generated by the the 'parspec' tool
if (CMAKE_CROSSCOMPILING)
  set(IMPORT_EXECUTABLES "IMPORTFILE-NOTFOUND" CACHE FILEPATH "The location of the export file from a native build")
  include(${IMPORT_EXECUTABLES})
endif()

if (NOT CMAKE_CROSSCOMPILING)
   set( PARSPEC_NAME "parspec" )
   add_executable( ${PARSPEC_NAME}
      src/parspec.cpp
      src/datautils.cpp
   )
   set_target_properties( ${PARSPEC_NAME} PROPERTIES FOLDER "${BASE_FOLDER}/${PARSPEC_NAME}" )
endif()

add_custom_command( OUTPUT ${generator_source_files}
   DEPENDS ${PARSPEC_NAME} BasinModellerProperty.Spec
   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
   COMMAND ${PARSPEC_NAME} -schema CauldronSchema -directory ${CMAKE_CURRENT_BINARY_DIR} -input BasinModellerProperty.Spec
)

if (NOT CMAKE_CROSSCOMPILING)
   EXPORT(TARGETS ${PARSPEC_NAME} FILE ${CMAKE_BINARY_DIR}/ImportExecutables.cmake )
endif()

generate_dox( src/tableio.cfg )

install(TARGETS ${LIB_NAME}
   RUNTIME DESTINATION bin
   LIBRARY   DESTINATION lib
   ARCHIVE DESTINATION lib
)

configure_file(
      ${CMAKE_CURRENT_SOURCE_DIR}/test/Reference.project3d
      ${CMAKE_CURRENT_BINARY_DIR}
      COPYONLY
)
configure_file(
      ${CMAKE_CURRENT_SOURCE_DIR}/test/ReferenceWithOutput.project3d
      ${CMAKE_CURRENT_BINARY_DIR}
      COPYONLY
)

file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ReferenceWithOutput_CauldronOutputDir)

configure_file(
      ${CMAKE_CURRENT_SOURCE_DIR}/test/ReferenceWithOutput_CauldronOutputDir/Output.iotables3d
      ${CMAKE_CURRENT_BINARY_DIR}/ReferenceWithOutput_CauldronOutputDir
      COPYONLY
)

add_gtest( NAME ${LIB_NAME}::DataSchemaTest
           SOURCES test/DataSchemaTest.cpp
           LIBRARIES ${LIB_NAME} utilities
           FOLDER "${BASE_FOLDER}/${LIB_NAME}"
)

add_gtest( NAME ${LIB_NAME}::DataBaseTest
           SOURCES test/DataBaseTest.cpp
           LIBRARIES ${LIB_NAME} utilities
           FOLDER "${BASE_FOLDER}/${LIB_NAME}"
)

add_gtest( NAME ${LIB_NAME}::ProjectFileHandlerTest
           SOURCES test/ProjectFileHandlerTest.cpp
           LIBRARIES ${LIB_NAME} utilities
           FOLDER "${BASE_FOLDER}/${LIB_NAME}"
)
