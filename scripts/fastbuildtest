#!/bin/csh -f

set cluster=""
set platform=""
set project=""
set application=""
set option=""
set procs=""
set subdir="."
set testdir=""
set debug="false"

while ($#argv > 0)
   switch ($1)
      case -h*:
         echo "usage: fastbuildtestdir -cluster <cluster-name>"
	 echo "                        -platform <OS-identifier>"
	 echo "                        -project <project-name>"
	 echo "                        -application <tool-to-test>"
	 echo "                        -procs <# procs>"
	 echo "                        -testdir < test-name>"
	 echo "                        [-help]"
	 echo "                        [-subdir <subdir>]"
	 echo ""
	 echo "       cluster-name:  e.g. EINSTEIN or kseu1206, do not use LOCAL"
	 echo "       OS-identifier: e.g. Linux64 or IRIX64"
	 echo "       project-name:  e.g. Acquifer"
	 echo "       application:   e.g. fastcauldron or fastgenex5 or fastmig"
	 echo "       test-name:          Test or Valid"
	 echo "       # procs:       e.g. 1 or 2 or 4"
	 echo "       subdir:        e.g. HydrostaticTemperature or LooselyCoupled (for fastcauldron only)"
	 echo ""
	 echo "       version of the application to be tested is determined at"
	 echo "       execution time through" \$CAULDRON_VERSION
	 exit 0
      case -cluster:
	 set cluster=$2
	 shift
	 shift
	 breaksw
      case -platform:
	 set platform=$2
	 shift
	 shift
	 breaksw
      case -project:
	 set project=$2
	 shift
	 shift
	 breaksw
      case -application:
	 set application=$2
	 shift
	 shift
	 breaksw
      case -option:
	 set option=$2
	 shift
	 shift
	 breaksw
      case -procs:
	 set procs=$2
	 shift
	 shift
	 breaksw
      case -testdir:
	 set testdir=$2
	 shift
	 shift
	 breaksw
      case -subdir:
	 set subdir=$2
	 shift
	 shift
	 breaksw
      case -debug:
         set debug="true"
	 shift
	 breaksw
      case *:
         echo "${1}: illegal option"
	 exit -1
   endsw
end

if ($cluster == "") then
   echo "Error: cluster to execute your test on is not specified, use -cluster to specify"
   exit -1
endif

if ($platform == "") then
   echo "Error: platform  (e.g. IRIX64 or Linux64) to execute your test on is not specified, use -platform to specify"
   exit -1
endif

if ($project == "") then
   echo "Error: project to test is not specified, use -project to specify"
   exit -1
endif

if ($application == "") then
   echo "Error: application to test is not specified, use -application to specify"
   exit -1
endif

set optionstring=""
if ($option == "decompaction") then
   set optionstring="-decompaction"
else if ($option == "hrdecompaction") then
   set optionstring="-hrdecompaction"
else if ($option == "temperature") then
   set optionstring="-temperature"
else if ($option == "pressure") then
   set optionstring="-pressure"
else if ($option == "pressuredtemperature") then
   set optionstring="-coupled -temperature"
else if ($option == "coupled") then
   set optionstring="-itcoupled"
endif

if ($procs == "") then
   echo "Error: number of processors to execute your test on is not specified, use -procs to specify"
   exit -1
endif

if ($testdir == "") then
   echo "Error: directory in which to execute the test is not specified, use -testdir to specify"
   exit -1
endif

set subdir = "${subdir}/"
endif

if ($debug == "true") then
   echo "variables:"
   echo "   cluster = $cluster"
   echo "   platform = $platform"
   echo "   project = $project"
   echo "   application = $application"
   echo "   option = $option"
   echo "   procs = $procs"
   echo "   testdir = $testdir"
   echo "   subdir = $subdir"
endif

if (-d $project) then
   cd $project
else
   echo "Error: directory $project does not exist"
   exit -1;
endif

set back = ""
if ($subdir != "./" && -d $subdir) then
   set back = "../"
endif

if ($debug == "true") then
   echo "   back = $back"
endif

   /bin/rm -rf $subdir$platform/$procs/$testdir/*/*

if ($testdir == "Test") then
   /bin/rm -rf $subdir$platform/$procs/$testdir/*
else
   /bin/rm -f $subdir$platform/$procs/$testdir/*
endif

   mkdir -p $subdir$platform/$procs/$testdir

set mydir=`pwd`

cd $subdir$platform/$procs/$testdir

if ($debug == "true") then
   echo "directory:"
   echo "   `pwd`"
endif

set inputdir = ${back}../../../Input

#check whether it is a 1d or 3d project (be careful: 3d projects might have 1d related projects in the same directory)
set extension=""
if (-f ${inputdir}/${project}.project3d) then
   set extension="project3d"
else
   set extension="project1d" 
endif

set projectfile = ${project}.${extension}
set projectoutfile = ${project}_out.${extension}

# if ($testdir == "Test") then
if (${extension} == "project3d") then
   foreach file (`xcauldron ${inputdir}/${projectfile}`)
      ln -s ${inputdir}/$file .
   end

   set outputdir = ${project}_CauldronOutputDir
   mkdir -p $outputdir
   cd  $outputdir
   ln -s ../${inputdir}/${outputdir}/* .
   cd ..
else
   ln -s ${inputdir}/${projectfile}
endif
# endif

setenv PATH ~ksaho3/bin.`uname`:$PATH

set versionstring = \$CAULDRON_VERSION

if (-f ${inputdir}/Commands) then
   echo "Linking Commands file"
   ln -s ${inputdir}/Commands .
else
   echo \#\!/bin/csh > Commands
# echo "setenv GEMPIS_VERBOSE 1" >> Commands
# echo "setenv GEMPIS_DEBUG 1" >> Commands
# echo "setenv GEMPIS_LSF_DEBUG '-pass -Dpass 3 -TSdebug'" >> Commands
   echo "setenv GEMPIS_PROJECTNAME ${project}" >> Commands
   echo gempis -\$CAULDRON_VERSION $cluster $procs $application $optionstring -project ${projectfile} -save ${projectoutfile} >> Commands
   echo set exitstatus = \$status >> Commands
   echo "echo gempis exitstatus = " \$exitstatus >> Commands
   echo exit \$exitstatus >> Commands
   chmod 555 Commands
endif

if ($debug == "true") then
   echo "Commands:"
   echo "   `cat Commands`"
endif
