#!/bin/bash
#
# defines the subroutines for LSF jobtypes
#
# Syntax: . jobtype_LSF
#
# External Environment Variables:
#   GEMPIS_JOBTYPE - the name of the JOBTYPE
#   GEMPIS_DATADIR - location where resource usage is maintained
#   LSB_MCPU_HOSTS - (defined by LSF) List of computers and their number of 
#                      processors to be used for a particular job.
#
# Notes:
# It is not currently possible to define identify the BJOB id because 
# the LSF job is interactive. So the command doesn't return until the 
# job is completed
#    BJOBS=`echo $line | sed 's/<//' | sed 's/>//' | awk '{ print $2 }'`
#    send_message INFO "$jobtype jobid is $BJOBS."
#############################################################################

# define some lsf macros
# Format
#ict                       31.0           81.0
#                                                    amsdc1-n-c00450.europe.shell.com
#                                                    amsdc1-n-c00451.europe.shell.com
#                                                    amsdc1-n-c00452.europe.shell.com
#                                                    amsdc1-n-c00453.europe.shell.com
#                                                    amsdc1-n-c00454.europe.shell.com
#                                                    amsdc1-n-c00455.europe.shell.com
# Other possibilities for the first line are:
#RESOURCE                 TOTAL       RESERVED       LOCATION
#watchdog                     -            0.0
lsf_shared_resources()
{
    bhosts -s $GEMPIS_REQUEST | tail -n +2
}

# Format
# get line about computer. Format:
#HOST_NAME      type    model  cpuf ncpus maxmem maxswp server RESOURCES
#houic-n-c00   gnode HP_DL145   1.0     2  7793M 32765M    Yes (lammpi mpich2 em_host cldrn_host nat_host res_host accls_host ict_host shared_host nvr_migrate nvr_preempt)
#amsdc1-n-c0   enode HP_DL145   1.0     2  7793M  8189M    Yes (lammpi rux_host cldrn_host hifi_host nvr_migrate nvr_preempt)"
#amsdc2-n-c0 LINUX64     X336  50.0     2  3520M 16386M    Yes (emt64 linux default)"
#amsdc1-n-s0 UNKNOWN     X455  50.0     -      -      -    Yes (dev)"
lsf_computer_info()
{
    lshosts $1 | tail -n +2
}

#JOBID   USER    STAT  QUEUE      FROM_HOST   EXEC_HOST   JOB_NAME   SUBMIT_TIME
#448375  nlafu1  RUN   untouchable amsdc1-n-s00037.europe.shell.com 4*amsdc1-n-c00510.europe.shell.com:4*amsdc1-n-c00551.europe.shell.com:4*amsdc1-n-c00580.europe.shell.com:3*amsdc1-n-c00608.europe.shell.com:4*amsdc1-n-c00540.europe.shell.com:4*amsdc1-n-c00546.europe.shell.com:4*amsdc1-n-c00482.europe.shell.com:4*amsdc1-n-c00484.europe.shell.com:4*amsdc1-n-c00486.europe.shell.com:4*amsdc1-n-c00575.europe.shell.com:4*amsdc1-n-c00461.europe.shell.com:4*amsdc1-n-c00550.europe.shell.com:4*amsdc1-n-c00539.europe.shell.com:4*amsdc1-n-c00473.europe.shell.com:4*amsdc1-n-c00560.europe.shell.com:4*amsdc1-n-c00541.europe.shell.com:1*amsdc1-n-c00493.europe.shell.com Walker_Ridge:fastcauldron Apr  8 09:21
#465901  nlome0  RUN   untouchable amsdc1-n-s00037.europe.shell.com 3*amsdc1-n-c00527.europe.shell.com:3*amsdc1-n-c00585.europe.shell.com:2*amsdc1-n-c00593.europe.shell.com:3*amsdc1-n-c00594.europe.shell.com:3*amsdc1-n-c00524.europe.shell.com:2*amsdc1-n-c00529.europe.shell.com WCSB_a:fastcauldron Apr  9 18:30
#528286  nlome0  RUN   untouchable amsdc1-n-s00037.europe.shell.com 1*amsdc1-n-c00562.europe.shell.com:1*amsdc1-n-c00592.europe.shell.com:4*amsdc1-n-c00516.europe.shell.com:2*amsdc1-n-c00508.europe.shell.com:2*amsdc1-n-c00492.europe.shell.com:2*amsdc1-n-c00606.europe.shell.com:2*amsdc1-n-c00602.europe.shell.com:1*amsdc1-n-c00545.europe.shell.com:1*amsdc1-n-c00556.europe.shell.com WCSB_a:fastcauldron Apr 11 17:54
#528350  ksaho3  RUN   untouchable amsdc1-n-s00037.europe.shell.com 2*amsdc1-n-c00519.europe.shell.com AlphaTestFullRes:fastcauldron Apr 11 23:31
#528367  ksaho3  RUN   untouchable amsdc1-n-s00037.europe.shell.com 4*amsdc1-n-c00583.europe.shell.com TopoFlowTest:fastcauldron Apr 11 23:43
lsf_all_jobs()
{
    bjobs -w -u all -P cldrn | tail -n +2
}

# Format
#No unfinished job found
#or
#465901  nlome0  RUN   untouchable amsdc1-n-s00037.europe.shell.com 3*amsdc1-n-c00527.europe.shell.com:3*amsdc1-n-c00585.europe.shell.com:2*amsdc1-n-c00593.europe.shell.com:3*amsdc1-n-c00594.europe.shell.com:3*amsdc1-n-c00524.europe.shell.com:2*amsdc1-n-c00529.europe.shell.com WCSB_a:fastcauldron Apr  9 18:30
#783648  nlgla8  PEND  epdtw_ams_cauldron amsdc1-n-s01taw    -        project3_04M96:fastcauldron Apr 17 11:33
lsf_my_jobs()
{
    bjobs -w | tail -n +2
}

# 
# prints the total number of resources to stdout
#
# Output Format: x
jobtype_resource_total()
{
    # cldrn                     60.0          112.0
    line=`lsf_shared_resources | head -1`
    if [ -z "$line" ]; then
	echo '4000'
	return
    fi
    #total=`echo $line | awk '{ print $2 }'`
    reserved=`echo $line | awk '{ print $3 }'`
    if [ -z "$reserved" ]; then
	echo '4000'
	return
    fi
    val=`echo $line | awk '{ printf( "%d\n", $2 + $3) }'`
    if [ $val = 0 ]; then
	echo $val
	return
    fi
    num=`printf "%d" $val 2>/dev/null`
    if [ $num = "0" ]; then
	echo "4000"
    else
	echo $val
    fi
}

# 
# prints the number of resources available to stdout
#
# Output Format: x
jobtype_resource_available()
{
    line=`lsf_shared_resources | head -1`
    if [ -z "$line" ]; then
	echo '4000'
	return
    fi
    total=`echo $line | awk '{ print $2 }'`
    if [ -z "$total" ]; then
	echo '4000'
	return
    fi
    num=`echo $line | awk '{ printf("%d\n", $2) }'`
    echo $num
}

#
# prints the list of computers allocated to a resource to stdout
# 
# Output Format:
# <hostname> [...]
#
jobtype_resource_computers()
{
    # amsdc1-n-c00450.europe.shell.com
    # amsdc1-n-c00451.europe.shell.com
    # . . .
    lsf_shared_resources | cut -c53- | while read line; do
	printf "%s " "$line"
    done
    # end of line
    echo ""
}

# 
# print the memory available per resource to stdout
#
jobtype_resource_memory()
{
    minmem=9999999999
    memoryper=0

    # get the lowest valid memory value
    count=1
    for computer in `jobtype_resource_computers`; do

         # do at most only the first 10 VALID entries
	if [ $count -gt 10 ]; then
	    break
	fi

	line=`lsf_computer_info $computer`

        # check if memory value is valid
	# Formats xxxM or xxxG with possible decimal point
	memory=`echo "$line" | awk '{ print $6 }' | sed 's/M//' | awk '{ 
if ( index($1, "G") != 0 ) 
{ 
	split( $1, arr, "G" )
        printf( "%d\n", arr[1] * 1024 )
}
else
	printf( "%d\n", $1 )
}'`
	# do we skip th memory value
	if [ -z "$memory" -o "$memory" = "-" ]; then
	    continue
	fi

	# get number of cpus
	cpus=`echo "$line" | awk '{ print $5 }'`

	# do we skip this number of processors
	if [ -z "$cpus" -o "$cpus" = "-" ]; then
	    continue
	fi

        # assume the computer needs 500 MB for itself
	let 'memoryper = ( memory - 500 ) / cpus'
	if [ "$memoryper" -lt "$minmem" ]; then
	    minmem=$memoryper
	fi

	let 'count = count + 1'
    done

    # output value
    if [ -z "$memoryper" -o "$memoryper" = 0 ]; then
	echo "20000"
    else
	echo $memoryper
    fi
}

# 
# prints resource usage to stdout
#
# Format:
#    JOBID STATE PROCS     USER COMMAND                  START       
#    <job list>
#
# LSF 6.0 EXEC_HOST format: mach:mach:mach...
# LSF 6.1+ EXEC_HOST format: N*mach:N*mach:N*mach... 
jobtype_resource_usage()
{
    # print data header
    printf "%8s %5s %5s %6s %-36s %-12s\n" JOBID STATE PROCS USER COMMAND START

    lsf_all_jobs | while read line; do

	jobid=`echo $line | awk '{ print substr($1,0,7) }'`
	user=`echo $line | awk '{ print substr($2,0,6) }'`
	state=`echo $line | awk '{ print substr($3,0,5) }'`

	# list of machines (<numproc>*<name>:....)
	list=`echo $line | awk '{ print $6 }' | sed 's/*/ /g' | sed 's/:/ /g'`
	procs=`echo "$list" | awk 'BEGIN { tot = 0 }
{
    if ( NF == 1 )
    	tot = 1;
    else
    {
      # if first field is a number
      if ( int($1) != 0 )
      {
        # then count the total according to the LSF 6.1 format
	for ( i=0; i<NF; i++ )
        {
	  if ( i % 2 == 1 ) 
          {
	      tot += $i
          }
        }
      }
      else
      {
        # count according the LSF 6.0 format
        tot = NF;
      }
    }
}
END { print tot }'`

	# get date started
	datetime=`echo $line | awk '{ print $(NF-2), $(NF-1), $NF }'`

	# filter out projectname ane executable in field size
	exec=`echo $line | awk '{ print $7 }'`
	[ $exec = "mpirun.lsf" ] && exec=`echo $line | awk '{ print $8 }'`
	dexec=`basename $exec | awk '{ print substr( $1, 0, 39) }'` 

	printf "%8s %5s %5s %6s %-36s %-12s\n" $jobid $state $procs $user $dexec "$datetime"
    done
}

#
# executes the command to submit an application and determines the result
# 
jobtype_submit_command()
{
    command="bsub -Is -J "${GEMPIS_PROJECTNAME}:${GEMPIS_EXEC}" $GEMPIS_SUBMIT -n $GEMPIS_NUMCPUS $GEMPIS_EXEDIR/gempis_mpiwrapper $GEMPIS_LSF_DEBUG"
    verbose "The job submission command is [$command]."

    # executed command and determine the result
    bsub -Is -J "${GEMPIS_PROJECTNAME}:${GEMPIS_EXEC}" $GEMPIS_SUBMIT -n $GEMPIS_NUMCPUS $GEMPIS_EXEDIR/gempis_mpiwrapper $GEMPIS_LSF_DEBUG
    result=$?
    verbose "LSF bsub returned [$result]."

    # if the result was good check with LSF if that is correct
    if [ $result != "0" ]; then
	verbose "Job submission failed."
	return $result
    fi

    # evaluate whether job proceeded correctly
    evaluate_result_files
    result=$?
    return $result
}

#
# prints the list of computers to by used by application to stdout
# 
# Format:
# <hostname> <number of cpus> [...]
#
jobtype_hostlist()
{
    # remove any domain names from list
    for val in $LSB_MCPU_HOSTS; do
	entry="`echo $val | awk -F'.' '{ print $1 }'`"
	if [ -z "$outlist" ]; then
	    outlist="$entry"
	else
	    outlist="$outlist $entry"
	fi
    done
    echo "$outlist"
}


############################################################################
# 
# Verify that the environment is setup correctly
#
# Called by: gempis
#
# Syntax: jobtype_verify
#
# Returns: nothing 
#
# Output: terminates on error
#
jobtype_verify()
{
    # determine if required LSF exec are on this computer
    verbose "Verifying required LSF commands are defined in PATH."
    verify_exec bjobs 
    verify_exec bhosts
    verify_exec lshosts
}

############################################################################
#
# called when job is completed/terminated
# 
# Called by: gempis_postjob
#
# Syntax: jobtype_end
#
# Returns: nothing
#
# Output: verbose string
# 
jobtype_end()
{
    echo "" >/dev/null
}

############################################################################
#
# terminates running jobs for the current user
# 
# Called by: gempis
#
# Syntax: jobtype_killjob [<LSF_jobid>]
# 
#       when no jobid is given it will terminate all user jobs for the 
#       current resource
#
# Returns: 0 = nothing to do or successful, 1 = jobs still remaining
#
# Output: none
#
jobtype_killjob()
{
    if [ -z "$1" ]; then
       jobid=0
    else
       jobid="$1"
    fi

    # will try 3 times to remove job
    count=0
    while true; do

	# LSF kill job 
	#   (echo not needed, LSF does this)
	#echo "Job [$jobid] is being terminated."
	bkill $jobid
	res=$?

	if [ $res != 0 ]; then
	    verbose "ERROR! The LSF kill command for job [$jobid] failed (error=$res), quitting."
	    return 1
	fi

        # wait for things to settle down
	verbose "Waiting 30 seconds to confirm the kill(s)."
	sleep 30

        # see if we have something to do
	if [ $jobid = 0 ]; then
	    list=`lsf_my_jobs | awk '{ print $1 }' 2>/dev/null`
	else
	    list=`lsf_my_jobs | awk '{ print $1 }' | grep $jobid 2>/dev/null`
	fi
	if [ -z "$list" ]; then
	    verbose "No jobs found."
	    return 0
	else
	    verbose "User job [$list] found."
	fi

	let 'count = count + 1'
	# after 3 times, give up
	if (( $count > 3 )); then
	    echo "ERROR! Cound not kill job(s) [$list] after 3 tries."
	    return 1
	fi

    done

    # should never come here
    return 1
}


#
# this definition is only to make sure that the script terminates successfully
echo "" >/dev/null

# End script
