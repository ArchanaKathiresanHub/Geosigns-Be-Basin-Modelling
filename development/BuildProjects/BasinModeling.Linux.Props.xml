<!--
***********************************************************************************************
BasinModeling.Linux.props.xml

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.
***********************************************************************************************
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

   <!--  INFORMATION OF LINUX HOSTS TO BUILD ON -->			
   <PropertyGroup Label="Identification">
      <AgentName    Condition="'$(AgentName)' == ''">LinuxBuild</AgentName>
      <!-- <AgentHost    Condition="'$(AgentHost)' == ''">amsd2a-n-b02303</AgentHost> -->
      <AgentHost    Condition="'$(AgentHost)' == ''">amsd2a-n-b03502</AgentHost>
      <AgentAccount Condition="'$(AgentAccount)' == ''">s_bpac00</AgentAccount>
      <AgentKey Condition="'$(AgentKey)' == ''">C:\opt\putty\s_bpac00.tfs_build_server.ppk</AgentKey>
      <SWEast>/nfs/rvl/groups/ept-sg/SWEast/Cauldron</SWEast>
      <RemoteSourceDir Condition="'$(RemoteSourceDir)' == ''">$(SWEast)/$(AgentAccount)/$(AgentName)/src</RemoteSourceDir>
      <RemoteBuildDir  Condition="'$(RemoteBuildDir)' == ''">$(SWEast)/$(AgentAccount)/builds/$(BuildNumber)</RemoteBuildDir>

      <!-- Same variables based on alternative credentials -->
      <AgentAccountAlt    Condition="'$(AgentAccountAlt)' == ''">s_bpac00</AgentAccountAlt>
      <AgentKeyAlt        Condition="'$(AgentKeyAlt)' == ''">C:\opt\putty\s_bpac00.tfs_build_server.ppk</AgentKeyAlt>
      <RemoteSourceDirAlt Condition="'$(RemoteSourceDirAlt)' == ''">$(SWEast)/$(AgentAccountAlt)/$(AgentName)/src</RemoteSourceDirAlt>
      <RemoteBuildDirAlt  Condition="'$(RemoteBuildDirAlt)' == ''">$(SWEast)/$(AgentAccountAlt)/builds/$(BuildNumber)</RemoteBuildDirAlt>
      <RemoteTestResults  Condition="'$(RemoteTestResults)' == ''">$(RemoteBuildDirAlt)/share/UnitTestResults</RemoteTestResults>
   </PropertyGroup>

   <!-- STANDARD UTILITIES -->
   <PropertyGroup Label="StandardUtilities">
      <!-- Look where is cygwin installed -->
      <cygwin_bin_dir  Condition="'$(cygwin_bin_dir)' == '' And Exists('C:\cygwin\bin')"     >C:\cygwin\bin\</cygwin_bin_dir>
      <cygwin_bin_dir  Condition="'$(cygwin_bin_dir)' == '' And Exists('D:\cygwin\bin')"     >D:\cygwin\bin\</cygwin_bin_dir>
      <cygwin_bin_dir  Condition="'$(cygwin_bin_dir)' == '' And Exists('C:\opt\cygwin\bin')" >C:\opt\cygwin\bin\</cygwin_bin_dir>
      <cygwin_bin_dir  Condition="'$(cygwin_bin_dir)' == '' And Exists('C:\opt\cygwin64\bin')" >C:\opt\cygwin64\bin\</cygwin_bin_dir>

      <putty_dir Condition="'$(putty_dir)' == '' And Exists('C:\opt\putty')">C:\opt\putty</putty_dir>

      <rsh_exe   Condition="'$(rsh_exe)' == ''"  >"$(cygwin_bin_dir.Replace('\','/'))ssh.exe -q"</rsh_exe>
      <ssh_exe   Condition="'$(ssh_exe)' == ''"  >"$(cygwin_bin_dir)ssh.exe"</ssh_exe>
      <scp_exe   Condition="'$(scp_exe)' == ''"  >"$(cygwin_bin_dir)scp.exe"</scp_exe>
      <cpio_exe  Condition="'$(cpio_exe)' == ''" >"$(cygwin_bin_dir)cpio.exe"</cpio_exe>
	   <tar_exe   Condition="'$(tar_exe)' == ''"  >"$(cygwin_bin_dir)tar.exe"</tar_exe>
      <rsync_exe Condition="'$(rsync_exe)' == ''">"$(cygwin_bin_dir)rsync.exe"</rsync_exe>

      <!-- Command to start non interactive SSH session -->
      <!-- <ssh_command>$(putty_dir)\PLINK.exe -batch -ssh -i "$(AgentKey)" $(AgentAccount)@$(AgentHost)</ssh_command>-->
      <ssh_command>$(ssh_exe) -q $(AgentAccount)@$(AgentHost)</ssh_command>
      <ssh_command_alt>$(putty_dir)\PLINK.exe -batch -ssh -i "$(AgentKeyAlt)" $(AgentAccountAlt)@$(AgentHost)</ssh_command_alt>

      <!-- Command to SCP (SSH copy). Note the 'echo y' which is necessary when copying 
           something to a destination host that has not been connected with before. 
           The 'y' answers yes to the question whether or not to trust the new host
       -->
      <!-- <scp_command>echo y | $(putty_dir)\PSCP.EXE -i "$(AgentKey)"</scp_command>-->
      <scp_command>echo y | $(scp_exe)</scp_command>
      <scp_command_alt>echo y | $(putty_dir)\PSCP.EXE -i "$(AgentKeyAlt)"</scp_command_alt>

      <printenv>cmd /c set</printenv>   
   </PropertyGroup>

   <!-- BUILD ON LINUX -->
   <PropertyGroup>
      <Configuration       Condition=" '$(Configuration)' == '' ">Release</Configuration>
      <Platform            Condition=" '$(Platform)' == '' "     >RHEL6.6</Platform>
      <AllocatedProcessors Condition=" '$(AllocatedProcessors)' == '' ">1</AllocatedProcessors> <!-- Legal values are: any integer greater or equal than 1 -->
      <ProcessorAllocation Condition=" '$(ProcessorAllocation)' == '' "></ProcessorAllocation> <!-- Legal values are: '', or 'x' for exclusive node allocation -->
      <VersionNumberMajor  Condition=" '$(VersionNumberMajor)' == '' ">9999</VersionNumberMajor> 
      <VersionNumberMinor  Condition=" '$(VersionNumberMinor)' == '' ">99</VersionNumberMinor>
      <VersionTag          Condition=" '$(VersionTag)' == '' ">nightly</VersionTag>
      <OtherCMakeParams    Condition=" '$(OtherCMakeParams)' == '' "></OtherCMakeParams>
      <Deploy              Condition=" '$(Deploy)' == '' ">False</Deploy>
      <DeployToHouston     Condition=" '$(DeployToHouston)' == '' ">False</DeployToHouston>
      <Geocase             Condition=" '$(Geocase)' == '' ">False</Geocase>
      <BuildNumber         Condition=" '$(BuildNumber)' == '' ">XXXX</BuildNumber>
      <TFSVersion          Condition=" '$(TFSVersion)' == '' ">YYYY</TFSVersion>
   </PropertyGroup>
  
   <PropertyGroup>  
      <solution_root>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\..'))</solution_root>
	   <build_dir>$(solution_root)\..\..\Build\$(Configuration)\$(Platform)</build_dir>
      <!-- Clear remote build directory. Ensure existence of remote source directory -->
      <remove_remote_dirs>$(ssh_command) "rm -Rf $(RemoteBuildDirAlt) $(RemoteTestResults)"</remove_remote_dirs>
      <make_remote_dirs>$(ssh_command) "rm -Rf $(RemoteBuildDirAlt); mkdir -p $(RemoteSourceDirAlt) $(RemoteBuildDirAlt) $(RemoteTestResults)"</make_remote_dirs>

      <!-- Copy source with rsync -->
      <!---<rsh>$(putty_dir)\PLINK.exe -batch -ssh -i $(AgentKeyAlt)</rsh>-->
      <copy_code>$(rsync_exe) --rsh="$(rsh_exe)" --recursive --delete . $(AgentAccountAlt)@$(AgentHost):$(RemoteSourceDirAlt)</copy_code>

      <!-- Execute remote build script -->
      <run_on_platform>$(RemoteSourceDirAlt)/development/BuildProjects/Linux-DoOnPlatform.sh $(Platform) $(ProcessorAllocation)$(AllocatedProcessors)</run_on_platform>
      <script_to_build>$(RemoteSourceDirAlt)/development/BuildProjects/Linux-BuildAndInstall.sh</script_to_build>
      <build_env_vars>env VERSION_NUMBER_MAJOR=$(VersionNumberMajor) VERSION_NUMBER_MINOR=$(VersionNumberMinor) VERSION_TAG=$(VersionTag) SRC_DIR=$(RemoteSourceDirAlt) INSTALL_DIR=$(RemoteBuildDirAlt) UNIT_TEST_OUTPUT_DIR=$(RemoteTestResults) CONFIGURATION=$(Configuration) PLATFORM=$(Platform) DEPLOY=$(Deploy) GEOCASE=$(Geocase) BUILD_NUMBER=$(BuildNumber) TFS_VERSION=$(TFSVersion) PROCESSORS=$(AllocatedProcessors)</build_env_vars>
      <build>$(ssh_command) "$(build_env_vars) /bin/bash $(run_on_platform) /bin/bash $(script_to_build) $(OtherCMakeParams)"</build>

      <!-- Deploy to Houston -->
      <script_deploy_to_houston>$(RemoteSourceDirAlt)/development/BuildProjects/ReleaseToHouston</script_deploy_to_houston>
      <deploy_to_houston>$(ssh_command) "$(build_env_vars) /bin/bash $(run_on_platform) /bin/bash -x $(script_deploy_to_houston) v$(VersionNumberMajor).$(VersionNumberMinor)$(VersionTag)"</deploy_to_houston>
	
      <!-- Copy entire build to drop folder -->
      <copy_build>$(scp_command) -r $(AgentAccountAlt)@$(AgentHost):$(RemoteBuildDirAlt)/* .</copy_build>
   </PropertyGroup>
  
   <Target Name="BuildOnLinux">
      <Exec Command="$(make_remote_dirs)" />
      <Exec Command="$(copy_code)" WorkingDirectory="$(solution_root)"/>
      <Exec Command="$(build)" />
      <Exec Command="$(deploy_to_houston)" Condition=" '$(DeployToHouston)' == 'True' "/>
      <Exec Command="$(copy_build)" WorkingDirectory="$(OutDir)"/>
   </Target>

   <Target Name="CleanOnLinux">
      <Exec Command="$(remove_remote_dirs)" />
   </Target>
 
   <!-- PUBLISHING JUNIT TEST RESULTS -->
   <!-- The stuff below is copied from Microsoft.TeamFoundation.Build.Extensions.Ant.targets that comes with the
        Visual Studio Team Foundation Server 2012 Update 2 Build Extensions add-on -->
   <UsingTask Condition=" '$(TeamBuildExtensionsAssemblyFile)' != '' "
              TaskName="Microsoft.TeamFoundation.Build.Extensions.Tasks.PublishJUnit"
              AssemblyFile="$(TeamBuildExtensionsAssemblyFile)" />
			 
   <UsingTask Condition=" '$(TeamBuildExtensionsAssemblyFile)' == '' "
              TaskName="Microsoft.TeamFoundation.Build.Extensions.Tasks.PublishJUnit"
              AssemblyFile="$(TeamBuildExtensionsRefPath)\Microsoft.TeamFoundation.Build.Extensions.Tasks.dll"/>

   <PropertyGroup>
      <!-- Defines the root path for locating assemblies and targets for the TFS Build extensions. -->
      <TeamBuildExtensionsRefPath Condition=" '$(TeamBuildExtensionsRefPath)' == '' ">$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v10.0\BuildExtensions</TeamBuildExtensionsRefPath>
	
	   <!-- Path to the stylesheet used to convert aggregated JUnit results into a Microsoft .trx file -->
      <JUnitTrxConversionStyle Condition=" '$(JUnitTrxConversionStyle)'=='' and  '$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Net Framework Setup\NDP\V4\Client@TargetVersion)'=='4.0.0'">$(TeamBuildExtensionsRefPath)\xslt\tpaggregated_2010_trx.xslt</JUnitTrxConversionStyle>
      <JUnitTrxConversionStyle Condition=" '$(JUnitTrxConversionStyle)'=='' ">$(TeamBuildExtensionsRefPath)\xslt\tpaggregated_trx.xslt</JUnitTrxConversionStyle>
	
	   <TestResultsRoot>$(build_dir)\TestResults</TestResultsRoot>
      <ScpTestResultsRoot>/cygdrive/$(TestResultsRoot.Replace('\','/'))</ScpTestResultsRoot>
   </PropertyGroup>  
  
   <Target Name="PublishJUnitFromLinux">

      <!-- Make a directory to store JUnit results and other temporary files in -->
      <MakeDir Condition="!Exists('$(TestResultsRoot)')" Directories="$(TestResultsRoot)" />
	
	   <!-- Copy the JUnit results -->
	   <Exec Command="$(scp_command) &quot;$(AgentAccountAlt)@$(AgentHost):$(RemoteTestResults)/*-junit.xml&quot; &quot;$(ScpTestResultsRoot.Replace(':',''))&quot;"/>

	   <ItemGroup>
         <JUnitLogFiles Include="$(TestResultsRoot)\*-junit.xml" />
      </ItemGroup>

      <Warning Condition=" '@(JUnitLogFiles)' == '' " Text="There are no Unit Test results to upload"/>
	
	   <!-- Publish the results -->
      <PublishJUnit Condition=" '@(JUnitLogFiles)' != '' "
                    BuildUri="$(BuildUri)"
                    Files="@(JUnitLogFiles)"
                    Flavor="$(Configuration)"
                    Platform="$(Platform)"
                    Style="$(JUnitTrxConversionStyle)"
                    TeamProjectCollectionUrl="$(TeamFoundationServerUrl)"
                    TestResultsRoot="$(TestResultsRoot)">
	      <!-- This Task comes from the Visual Studio Team Foundation Server 2012 Update 2 Build Extensions 
	           (see http://visualstudiogallery.msdn.microsoft.com/45b4e378-5b81-4186-9b7f-21cc5c2f743d)
		        which must be installed on the Build Server. I think this package is supposed to be used 
		        combination with the "Upgrade Template" / TFSBuild.proj. Therefore it has a dependency on 
		        the assembly Microsoft.TeamFoundation.Build.ProcessComponents.dll (v10.0). However, probably 
		        because we don't use the "Upgrade Template", this assembly cannot be found automatically. 
		        See http://msdn.microsoft.com/en-us/library/yx7xezcf.aspx for more information about "assembly binding".
		        Therefore, if MSBuild complains about not finding a reference to ProcessComponents assembly, the 
		        solution is to just copy the Microsoft.TeamFoundation.Build.ProcessComponents.dll to 
		        the same directory as where the Microsoft.TeamFoundation.Build.Extensions.Tasks.dll is located.
		        (see http://stackoverflow.com/questions/690432/how-to-solve-custom-msbuild-task-requires-assembly-outside-of-appbase )
	      -->
	   </PublishJUnit>
   </Target>
	
	
  
   <Target Name="DisplayStandardVariables">
      <Message Text="TeamProject=$(TeamProject)"/>
      <Message Text="TeamFoundationServerUrl=$(TeamFoundationServerUrl)"/>
      <Message Text="BuildDefinitionName=$(BuildDefinitionName)"/>
      <Message Text="LinuxBuildRoot=$(LinuxBuildRoot)"/>
      <Message Text="BuildDefinitionID=$(BuildDefinitionID)"/>
      <Message Text="SourcePath=$(SourcePath)"/>
      <Message Text="Configuration=$(Configuration)"/>
      <Message Text="SourceGetVersion=$(SourceGetVersion)"/>
      <Message Text="IncrementalGet=$(IncrementalGet)"/>
      <Message Text="IncrementalBuild=$(IncrementalBuild)"/>
      <Message Text="OutDir=$(OutDir)"/>
      <Message Text="MSBuildProjectDirectory=$(MSBuildProjectDirectory)"/>
      <Message Text="BuildAgent=$(BuildAgent)" />
      <Message Text="Workspace=$(BuildAgent)" />
      <Message Text="BuildDirectory=$(BuildDirectory)" />
      <Message Text="LabelName=$(LabelName)" />
      <Message Text="WorkspaceName=$(WorkspaceName)" />
      <Message Text="SourcesDirectory=$(SourcesDirectory)" />
      <Message Text="BinariesDirectory=$(BinariesDirectory)" />
      <Message Text="TestResultsDirectory=$(TestResultsDirectory)" />
      <Message Text="BuildAgentId=$(BuildAgentId)" />
      <Message Text="BuildDefinitionPath=$(BuildDefinitionPath)" />
      <Message Text="AgentHost = $(AgentHost)" />
      <Message Text="AgentAccount = $(AgentAccount)" />
      <Message Text="AgentKey = $(AgentKey)" />
      <Message Text="AgentAccountAlt = $(AgentAccountAlt)" />
      <Message Text="AgentKeyAlt = $(AgentKeyAlt)" />
      <Message Text="cygwin_bin_dir = $(cygwin_bin_dir)" />
      <Message Text="cpio_exe = $(cpio_exe)" />
      <Message Text="putty_dir = $(putty_dir)"/>
      <Message Text="ssh_command = $(ssh_command)" />
      <Message Text="scp_command = $(scp_command)" />
      <Message Text="solution_root = $(solution_root)" />
   </Target>

   <!-- phony target to maintain backwards compatibility with the mispelled target -->
   <Target Name="DispalyStandardVariables" DependsOnTargets="DisplayStandardVariables" />  
  
   <Target Name="PrintEnv">
      <Exec Command="$(printenv)" />
   </Target>
</Project>
